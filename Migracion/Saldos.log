1> 2> 3> 4> 5> 6> 7> 8> 9> 10> 11> 12> 13> 14> 15> --
-- Programador: Pedro Zambrano
-- Fecha:       17-sep-2024.
-- Observación: Script de creación de tabla de seguimiento al proceso de cierre e inicio de ejercicio.
--

If Exists ( Select Top 1 1
            From   Sysobjects
            Where  Uid = 1
            And    Type = 'U'
            And    Name = 'logCierreInicioEjercicioTbl')
   Begin
      Drop Table dbo.logCierreInicioEjercicioTbl
   End
1> 2> 3> 4> 5> 6> 7> 8> 9> 10> 11> 12> 13> 14> 15> 
Create Table dbo.logCierreInicioEjercicioTbl
(idLog          Integer      Not Null Identity (1, 1),
 Ejercicio      Smallint     Not Null,
 mes            Tinyint      Not Null,
 descripcion    Varchar(100) Not Null,
 idError        Integer      Not Null Default 0,
 mensajeError   Varchar(250) Not Null Default Char(32),
 usuario        Varchar( 10) Not Null Default Char(32),
 fechaAct       Datetime     Not Null Default Getdate(),
 ipAct          Varchar( 30)     Null Default Char(32),
 Constraint     logCierreInicioEjercicioPk
 Primary Key (idLog),
 Index logCierreInicioEjercicioIdx01 (Ejercicio, mes));
1> 2> 3> 4> 5> 6> 7> 8> 9> 10> 11> 12> 
--
-- Comentarios
--

Execute sp_addextendedproperty    @name       = N'MS_Description',
                                  @value      = N'Tabla de seguimiento al proceso de cierre e inicio de ejercicio.',
                                  @level0type = 'Schema',
                                  @level0name = N'dbo',
                                  @level1type = 'Table',
                                  @level1name = N'logCierreInicioEjercicioTbl'
1> 2> 3> 4> 5> 6> 7> 8> 9> 10> 
Execute sp_addextendedproperty    @name       = N'MS_Description',
                                  @value      = N'Identificador único del seguimiento de proceso.',
                                  @level0type = 'Schema',
                                  @level0name = N'dbo',
                                  @level1type = 'Table',
                                  @level1name = N'logCierreInicioEjercicioTbl',
                                  @level2type = 'Column',
                                  @level2name = N'idLog'
1> 2> 3> 4> 5> 6> 7> 8> 9> 10> 
Execute sp_addextendedproperty    @name       = N'MS_Description',
                                  @value      = N'Identificador del Ejercicio en proceso.',
                                  @level0type = 'Schema',
                                  @level0name = N'dbo',
                                  @level1type = 'Table',
                                  @level1name = N'logCierreInicioEjercicioTbl',
                                  @level2type = 'Column',
                                  @level2name = N'Ejercicio'
1> 2> 3> 4> 5> 6> 7> 8> 9> 10> 
Execute sp_addextendedproperty    @name       = N'MS_Description',
                                  @value      = N'Identificador del Mes en proceso.',
                                  @level0type = 'Schema',
                                  @level0name = N'dbo',
                                  @level1type = 'Table',
                                  @level1name = N'logCierreInicioEjercicioTbl',
                                  @level2type = 'Column',
                                  @level2name = N'mes'
1> 2> 3> 4> 5> 6> 7> 8> 9> 10> 
Execute sp_addextendedproperty    @name       = N'MS_Description',
                                  @value      = N'Descripción de la secuencia de proceso.',
                                  @level0type = 'Schema',
                                  @level0name = N'dbo',
                                  @level1type = 'Table',
                                  @level1name = N'logCierreInicioEjercicioTbl',
                                  @level2type = 'Column',
                                  @level2name = N'descripcion'
1> 2> 3> 4> 5> 6> 7> 8> 9> 10> 
Execute sp_addextendedproperty    @name       = N'MS_Description',
                                  @value      = N'Identificador del error presentado en la secuencia del proceso.',
                                  @level0type = 'Schema',
                                  @level0name = N'dbo',
                                  @level1type = 'Table',
                                  @level1name = N'logCierreInicioEjercicioTbl',
                                  @level2type = 'Column',
                                  @level2name = N'idError'
1> 2> 3> 4> 5> 6> 7> 8> 9> 10> 
Execute sp_addextendedproperty    @name       = N'MS_Description',
                                  @value      = N'Mensaje de error presentado en la secuencia del proceso.',
                                  @level0type = 'Schema',
                                  @level0name = N'dbo',
                                  @level1type = 'Table',
                                  @level1name = N'logCierreInicioEjercicioTbl',
                                  @level2type = 'Column',
                                  @level2name = N'mensajeError'
1> 2> 3> 4> 5> 6> 7> 8> 9> 10> 
Execute sp_addextendedproperty    @name       = N'MS_Description',
                                  @value      = N'Fecha de la actualización del registro.',
                                  @level0type = 'Schema',
                                  @level0name = N'dbo',
                                  @level1type = 'Table',
                                  @level1name = N'logCierreInicioEjercicioTbl',
                                  @level2type = 'Column',
                                  @level2name = N'fechaAct'
1> 2> 3> 4> 5> 6> 7> 8> 9> 10> 
Execute sp_addextendedproperty    @name       = N'MS_Description',
                                  @value      = N'Identificador del Usuario que realizó el proceso',
                                  @level0type = 'Schema',
                                  @level0name = N'dbo',
                                  @level1type = 'Table',
                                  @level1name = N'logCierreInicioEjercicioTbl',
                                  @level2type = 'Column',
                                  @level2name = N'usuario'
1> 2> 3> 4> 5> 6> 7> 8> 9> 10> 
Execute sp_addextendedproperty    @name       = N'MS_Description',
                                  @value      = N'Dirección IP desde donde se realizó la actualización.',
                                  @level0type = 'Schema',
                                  @level0name = N'dbo',
                                  @level1type = 'Table',
                                  @level1name = N'logCierreInicioEjercicioTbl',
                                  @level2type = 'Column',
                                  @level2name = N'ipAct'
1> 1> 2> 3> 4> 5> 6> 7> 8> 9> 10> 11> 12> 13> 14> 15> 16> 17> 18> Declare
   @w_fechaAct   Datetime    = Getdate(),
   @w_ipAct      Varchar(30) = dbo.Fn_BuscaDireccionIP(),
   @w_macAct     Varchar(30) = dbo.Fn_Busca_DireccionMac();

Begin
   Delete dbo.conParametrosGralesTbl
   Where  idParametroGral = 10;
   
   Insert dbo.conParametrosGralesTbl
  (idParametroGral, descripcion, parametroChar, parametroNumber, parametroFecha, idUsuarioAct, fechaAct, ipAct, macAddressAct) 
   Select 10, N'Dia y Mes de Inicio y Fin Proceso fin ejercicio', '0101-3103', Null, Null, 1, Getdate(), @w_ipAct, @w_macAct

 
   Return

End
(1 row affected)
(1 row affected)
1> 2> 
1> 2> 3> 4> 5> 6> 7> 8> 9> 10> 11> 12> 13> 14> 15> 16> 17> 18> 19> 20> 21> 22> 23> 24> 25> 26> 27> 28> 29> 30> 31> 32> 33> 34> 35> 36> 37> 38> 39> 40> 41> 42> 43> 44> 45> 46> 47> 48> 49> 50> 51> 52> 53> 54> 55> 56> 57> 58> 59> 60> 61> 62> 63> 64> 65> 66> 67> 68> 69> 70> 71> 72> 73> 74> 75> 76> 77> 78> 79> 80> 81> 82> 83> 84> 85> 86> 87> 88> 89> 90> 91> 92> 93> 94> 95> 96> 97> 98> 99> 100> 101> 102> 103> 104> 105> 106> 107> 108> 109> 110> 111> 112> 113> 114> 115> 116> 117> 118> 119> 120> 121> 122> 123> 124> 125> 126> 127> 128> 129> 130> 131> 132> 133> 134> 135> 136> 137> 138> 139> 140> 141> 142> 143> 144> 145> 146> 147> 148> 149> 150> 151> 152> 153> 154> 155> 156> 157> 158> 159> 160> 161> 162> 163> 164> 165> 166> 167> 168> 169> 170> 171> 172> 173> 174> 175> 176> 177> 178> 179> 180> 181> 182> 183> 184> 185> 186> 187> 188> 189> 190> 191> 192> 193> 194> 195> 196> 197> 198> 199> 200> 201> 202> 203> 204> 205> 206> 207> 208> 209> 210> 211> 212> 213> 214> 215> 216> 217> 218> 219> 220> 221> 222> 223> 224> 225> 226> 227> 228> 229> 230> 231> 232> 233> 234> 235> 236> 237> 238> 239> 240> 241> 242> 243> 244> 245> 246> 247> 248> 249> 250> 251> 252> 253> 254> 255> 256> 257> 258> 259> 260> 261> 262> 263> 264> 265> 266> 267> 268> 269> 270> 271> 272> 273> 274> 275> 276> 277> 278> 279> 280> 281> 282> 283> 284> 285> 286> 287> 288> 289> 290> 291> 292> 293> 294> 295> 296> 297> 298> 299> 300> 301> 302> 303> 304> 305> 306> 307> 308> 309> 310> 311> 312> 313> 314> 315> 316> 317> 318> 319> 320> 321> 322> 323> 324> 325> 326> 327> 328> 329> 330> 331> 332> 333> 334> 335> 336> 337> 338> 339> 340> 341> 342> 343> 344> 345> 346> 347> 348> 349> 350> 351> 352> 353> 354> 355> 356> 357> 358> 359> 360> 361> 362> 363> 364> 365> 366> 367> 368> 369> 370> 371> 372> 373> 374> 375> 376> 377> 378> 379> 380> 381> 382> 383> 384> 385> 386> 387> 388> 389> 390> 391> 392> 393> 394> 395> 396> 397> 398> 399> 400> 401> 402> 403> 404> 405> 406> 407> 408> 409> 410> 411> 412> 413> 414> 415> 416> 417> 418> 419> 420> 421> 422> 423> 424> 425> 426> 427> 428> 429> 430> 431> 432> 433> 434> 435> 436> 437> 438> 439> 440> 441> 442> 443> 444> 445> 446> 447> 448> 449> 450> 451> 452> 453> 454> 455> 456> 457> 458> 459> 460> 461> 462> 463> 464> 465> 466> 467> 468> 469> 470> 471> 472> 473> 474> 475> 476> 477> 478> 479> 480> 481> 482> 483> 484> 485> 486> 487> 488> 489> 490> 491> 492> 493> 494> 495> 496> 497> 498> 499> 500> 501> 502> 503> 504> 505> 506> 507> 508> 509> 510> 511> 512> 513> 514> 515> 516> 517> 518> 519> 520> 521> 522> 523> 524> 525> 526> 527> 528> 529> 530> 531> 532> 533> 534> 535> 536> 537> 538> 539> 540> 541> 542> 543> 544> 545> 546> 547> 548> 549> 550> 551> 552> 553> 554> 555> 556> 557> 558> 559> 560> 561> 562> 563> 564> 565> 566> 567> 568> 569> 570> 571> 572> 573> 574> 575> 576> 577> 578> 579> 580> 581> 582> 583> 584> 585> 586> 587> 588> 589> 590> 591> 592> 593> 594> 595> 596> 597> 598> 599> 600> 601> 602> 603> 604> 605> 606> 607> 608> 609> 610> 611> 612> 613> 614> 615> 616> 617> 618> 619> 620> 621> 622> 623> 624> 625> 626> 627> 628> 629> 630> 631> 632> 633> 634> 635> 636> 637> 638> 639> 640> 641> 642> 643> 644> 645> 646> 647> 648> 649> 650> 651> 652> 653> 654> 655> 656> 657> 658> 659> 660> 661> 662> 663> 664> 665> 666> 667> /*

-- Declare
   -- @PnAnio                Smallint            = 2024,
   -- @PnMes                 Tinyint             = 13,
   -- @PnEstatus             Integer             = 0,
   -- @PsMensaje             Varchar( 250)       = ' ' ;
-- Begin

   -- Execute dbo.Spp_generaAsientoCierreAnio @PnAnio      = @PnAnio,
                                           -- @PnMes       = @PnMes,
                                           -- @PnEstatus   = @PnEstatus Output,
                                           -- @PsMensaje   = @PsMensaje Output;

   -- Select @PnEstatus, @PsMensaje
   -- Return
-- End
-- Go

--

-- Objeto:        Spp_generaAsientoCierreAnio.
-- Objetivo:      Genera el asiento de fin de ejericio.
-- Fecha:         28/08/2024
-- Programador:   Pedro Zambrano


*/

Create Or Alter Procedure dbo.Spp_generaAsientoCierreAnio
  (@PnAnio                Smallint,
   @PnMes                 Tinyint,
   @PnEstatus             Integer             = 0   Output,
   @PsMensaje             Varchar( 250)       = ' ' Output)
As
Declare
   @w_Error             Integer,
   @w_linea             Integer,
   @w_operacion         Integer,
   @w_registro          Integer,
   @w_Region_id         Integer,
   @w_Sucursal_id       Integer,
   @w_idEstatus         Tinyint,
   @w_sector_id         Varchar(    2),
   @w_desc_error        Varchar(  250),
   @w_referencia        Varchar(   20),
   @w_idusuario         Varchar(  Max),
   @w_tipoPoliza        Varchar(    3),
   @w_Mes_Mov           Varchar(    3),
   @w_scta              Varchar(    4),
   @w_numPoliza         Varchar(   20),
   @w_llave             Varchar(   20),
   @w_filtro            Varchar(  Max),
   @w_sql               Varchar(  Max),
   @w_anioAnterior      Smallint,
   @w_mesAnterior       Smallint,
   @w_anioProximo       Smallint,
   @w_mesProximo        Smallint,
   @w_mesFin            Smallint,
   @w_idAuxiliar        Smallint,
   @w_fechaIni          Date,
   @w_fechaFin          Date,
   @w_Fecha_Mov         Date,
   @w_fechaCaptura      Datetime,
   @w_importeDebe       Decimal(18, 2),
   @w_importeHaber      Decimal(18, 2),
   @w_importeSaldo      Decimal(18, 2),
   @w_importeCar        Decimal(18, 2),
   @w_importeAbo        Decimal(18, 2),
   @w_consulta          NVarchar(1500),
   @w_usuario           Nvarchar(  20),
   @w_param             NVarchar( 750),
   @w_comilla           Char(1),
   @w_clave             Char(1),
   @w_sucursable        Tinyint;

Begin
   Set Nocount       On
   Set Xact_Abort    On
   Set Ansi_Nulls    Off

   Select @PnEstatus         = 0,
          @PsMensaje         = Null,
          @w_operacion       = 9999,
          @w_fechaCaptura    = Getdate(),
          @w_comilla         = Char(39),
          @w_tipoPoliza      = 'PDI',
          @w_fecha_Mov       = Eomonth(Convert(Date, Concat('01/', @PnMes -1, '/', @PnAnio), 103)),
          @w_sucursable      = Isnull(dbo.Fn_BuscaResultadosParametros(12, 'valor'), 0);

--
-- Obtención del usuario de la aplicación para procesos batch.
--

   Select @w_idusuario = parametroChar
   From   dbo.conParametrosGralesTbl
   Where  idParametroGral = 6;

   Select @w_consulta   = Concat('Select @o_usuario = dbo.Fn_Desencripta_cadena (', @w_idusuario, ')'),
          @w_param      = '@o_usuario    Nvarchar(20) Output';

   Begin Try
      Execute Sp_executeSql @w_consulta, @w_param, @o_usuario = @w_usuario Output
   End Try

   Begin Catch
      Select  @w_Error      = @@Error,
              @w_linea      = Error_line(),
              @w_desc_error = Substring (Error_Message(), 1, 200)

   End   Catch

   If @w_error != 0
      Begin
         Select @w_error, @w_desc_error;

         Goto Salida
      End

--
-- Validaciones
--

   Select  Top 1 @w_idEstatus = idEstatus
   From    dbo.ejercicios With (Nolock)
   Where   ejercicio = @PnAnio;
   If @@Rowcount = 0
      Begin
         Select @PnEstatus  = 8021,
                @PsMensaje =  'Error.: ' + (dbo.Fn_Busca_MensajeError(@w_operacion, @PnEstatus))

         Set Xact_Abort Off
         Return
      End

   If @w_idEstatus != 1
      Begin
         Select @PnEstatus  = 8022,
                @PsMensaje =  'Error.: ' + (dbo.Fn_Busca_MensajeError(@w_operacion, @PnEstatus))

         Set Xact_Abort Off
         Return
      End

   If Not Exists ( Select Top 1 1
                   From   dbo.catCriteriosTbl Whith (Nolock)
                   Where  criterio = 'mes'
                   And    valor    = @PnMes)
      Begin
         Select @PnEstatus  = 8023,
                @PsMensaje =  'Error.: ' + (dbo.Fn_Busca_MensajeError(@w_operacion, @PnEstatus))

         Set Xact_Abort Off
         Return
      End

   Select @w_idEstatus = idEstatus
   From   dbo.control With (Nolock)
   Where  ejercicio = @PnAnio
   And    mes       = @PnMes;
   If @@Rowcount = 0
      Begin
         Select @PnEstatus  = 8024,
                @PsMensaje =  'Error.: ' + (dbo.Fn_Busca_MensajeError(@w_operacion, @PnEstatus))

         Set Xact_Abort Off
         Return
      End

   If @w_idEstatus != 1
      Begin
         Select @PnEstatus  = 8025,
                @PsMensaje =  'Error.: ' + (dbo.Fn_Busca_MensajeError(@w_operacion, @PnEstatus))

         Set Xact_Abort Off
         Return
      End

--
-- Se valida si existe el catálogo para el mes a procesar.
--

   If @w_sucursable      = 2
      Begin
         If Not Exists (Select Top 1 1
                        From   dbo.CatalogoAuxiliar With (Nolock)
                        Where  Ejercicio = @PnAnio
                        And    mes       = @PnMes)
            Begin
               Select @PnEstatus  = 8026,
                      @PsMensaje =  'Error.: ' + (dbo.Fn_Busca_MensajeError(@w_operacion, @PnEstatus))

               Set Xact_Abort Off
               Return
            End
      End
   Else
      Begin
         If Not Exists (Select Top 1 1
                        From   dbo.Catalogo With (Nolock)
                        Where  Ejercicio = @PnAnio
                        And    mes       = @PnMes)
            Begin
               Select @PnEstatus  = 8026,
                      @PsMensaje =  'Error.: ' + (dbo.Fn_Busca_MensajeError(@w_operacion, @PnEstatus))

               Set Xact_Abort Off
               Return
            End

      End

--
-- Se valida si es el último periodo ejercicio
--

   Select @w_mesFin = Max(valor)
   From   dbo.catCriteriosTbl Whith (Nolock)
   Where  criterio = 'mes';

   If @w_mesFin != @PnMes
      Begin
         Select @PnEstatus  = 8027,
                @PsMensaje =  'Error.: ' + (dbo.Fn_Busca_MensajeError(@w_operacion, @PnEstatus))

         Set Xact_Abort Off
         Return
      End

   Select @w_Mes_Mov = Upper(Substring(descripcion, 1, 3))
   From   dbo.catCriteriosTbl Whith (Nolock)
   Where  criterio = 'mes'
   And    valor    = @PnMes;

--
-- Fin de Validaciones
--

--
-- Se obtiene la cuenta auxiliar de resultados.
--

   Select @w_idAuxiliar = parametroNumber
   From   dbo.conParametrosGralesTbl With (Nolock)
   Where  idParametroGral = 8

   Select @w_llave = CuentaInterna
   From   dbo.Cuentas_predeterminadas With (Nolock)
   Where  id = @w_idAuxiliar;

--
-- Se valida que la cuenta Este relacionado a todas las Areas.
--

   If @w_sucursable = 2
      Begin
         If Not Exists (Select top 1 1
                        From   dbo.CatalogoAuxiliar c
                        Where  c.Ejercicio = @PnAnio
                        And    c.mes       = @PnMes
                        And    c.Llave     = @w_llave)
            Begin
               Select @PnEstatus  = 8030,
                      @PsMensaje =  'Error.: ' + (dbo.Fn_Busca_MensajeError(@w_operacion, @PnEstatus))

               Set Xact_Abort Off
               Return
            End
      End
   Else
      Begin
         If Not Exists ( Select Top 1 1
                         From   dbo.Catalogo With (Nolock)
                         Where  llave = @w_llave)
            Begin
               Select @PnEstatus  = 8029,
                      @PsMensaje =  'Error.: ' + (dbo.Fn_Busca_MensajeError(@w_operacion, @PnEstatus))

               Set Xact_Abort Off
               Return
            End
      End
--
-- Obtener los mayores de las cuentas de resultado.
--

   Declare
      C_Cuentas Cursor For
      Select Substring(c.llave, 1, 4),
             Row_number () Over (Order By Substring(c.llave, 1, 4) )
      From   dbo.Rangos a With (NolocK)
      Join   dbo.SubRangos b
      On     b.Rango_id = a.Rango_id
      Join   dbo.Catalogo c
      On     Substring(c.llave, 1, 4) Between b.Llave_final And b.Llave_final
      Where  a.Naturaleza_id In ('IN', 'EG')
      Group  By Substring(c.llave, 1, 4);

   Begin
      Open  C_Cuentas
      While @@Fetch_Status < 1
      Begin
         Fetch C_Cuentas Into @w_scta, @w_registro
         If @@Fetch_Status != 0
            Begin
               Break
            End

         If @w_registro = 1
            Begin
               Set @w_filtro = Concat(' And Substring(llave, 1, 4) In ( ', @w_comilla, @w_scta, @w_comilla)
            End
         Else
            Begin
               Set @w_filtro = Concat(@w_filtro, ', ', @w_comilla, @w_scta, @w_comilla)
            End

      End
      Close      C_CUentas
      Deallocate C_CUentas
   End

   Set @w_filtro = @w_filtro + ')'

--
-- Se declara el cursor para obtener la Región y asignar el comprobante por región.
--

   If @w_sucursable = 2
      Begin
         Set @w_sql = 'Declare
                          C_Region_id  Cursor For ' +
                          'Select Region_id, Sucursal_id, Sector_id '      +
                          'From   dbo.Rangos a With (NolocK) ' +
                          'Join   dbo.SubRangos b '            +
                          'On     b.Rango_id = a.Rango_id '    +
                          'Join   dbo.CatalogoAuxiliar c '     +
                          'On     Substring(c.llave, 1, 4) Between b.Llave_final And b.Llave_final ' +
                          'Where  a.Naturaleza_id In (' + @w_comilla + 'IN' + @w_comilla + ', ' +
                                                          @w_comilla + 'EG' + @w_comilla + ') ' +
                          'And    Ejercicio = ' + Cast(@PnAnio As Varchar) + ' ' +
                          'And    mes       = ' + Cast(@PnMes  As Varchar) + ' ' +
                          'And    SAct     != 0 ' +
                          'Group  By Region_id, Sucursal_id, Sector_id ' +
                          'Order  By 1, 2';
      End
   Else
      Begin
         Set @w_sql = 'Declare
                          C_Region_id  Cursor For ' +
                          'Select 0, 0, 0 ';
      End


--
-- Inicio de Proceso.
--

   Begin Transaction

      Execute (@w_sql)

      Open C_Region_id
      While @@Fetch_status < 1
      Begin
         Fetch C_Region_id Into @w_Region_id, @w_Sucursal_id, @w_sector_id
         If @@Fetch_status != 0
            Begin
               Break
            End

         If @w_sucursable = 2
            Begin
               If Not Exists (Select top 1 1
                              From   dbo.CatalogoAuxiliar c
                              Where  c.Ejercicio = @PnAnio
                              And    c.mes       = @PnMes
                              And    c.Llave     = @w_llave
                              And    c.Region_id = @w_Region_id)
                  Begin
                     Rollback Transaction

                     Select @PnEstatus  = 8029,
                            @PsMensaje =  'Error.: ' + (dbo.Fn_Busca_MensajeError(@w_operacion, @PnEstatus))

                     Close      C_Region_id
                     Deallocate C_Region_id

                     Set Xact_Abort Off
                     Goto Salida
                  End
            End

--
-- Se obtiene el numero de la póliza por Región.
--

         Select @w_numPoliza = Max(Substring(referencia, 4, 5))
         From   dbo.polizaAnio With (Nolock)
         Where  Substring(referencia, 1, 3) = @w_tipoPoliza
         And    ejercicio    = @PnAnio
         And    mes          = @PnMes;
         If @w_numPoliza Is Null
            Begin
               Set @w_numPoliza = '00000'
            End

         Select @w_numPoliza = Format(Cast(@w_numPoliza As Integer) + 1, '00000'),
                @w_numPoliza = @w_tipoPoliza + @w_numPoliza

--
-- Actualización de las pólizas (cabecero).
--

         Begin Try
            Insert Into dbo.polizaAnio
           (Referencia, Fecha_Mov, Fecha_Cap, Concepto,
            Cargos,     Abonos,    TCons,     Usuario,
            TipoPoliza, Documento, Usuario_cancela, Fecha_Cancela,
            Status,     Mes_Mov,   TipoPolizaConta, FuenteDatos,
            Ejercicio,  Mes)
            Select @w_numPoliza, @w_fecha_Mov, @w_fechaCaptura,
                   Concat('Póliza de cierre de ejercicio ',@PnAnio),
                   0 Cargos,        0 Abonos,    0 Tcons,         @w_usuario,
                   @w_tipoPoliza,   Char(32),    Null,            Null,
                   1,               @w_Mes_Mov,  Null,            Null,
                   @PnAnio,         @PnMes
         End Try

         Begin Catch
            Select  @w_Error      = @@Error,
                    @w_linea      = Error_line(),
                    @w_desc_error = Substring (Error_Message(), 1, 200)

         End Catch

         If IsNull(@w_error, 0) <> 0
            Begin
               Rollback Transaction

               Select @PnEstatus = @w_error,
                      @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

               Close      C_Region_id
               Deallocate C_Region_id

               Set Xact_Abort Off
               Goto Salida
            End

--
-- Insert de los movimientos de la póliza Final.
--

         If @w_sucursable = 2
            Begin
               Set @w_sql = 'Select ' + @w_comilla + @w_numPoliza + @w_comilla + ', Row_number () Over (Order By llave ), Moneda, ' + @w_comilla + Cast(@w_Fecha_Mov As Varchar) + @w_comilla + ', ' +
                                    'Llave,    Concat(' + @w_comilla + 'Cierre ejercicio ' + @w_comilla + ',' + Cast(@PnAnio As Varchar) + '), Abs(Sact),   Char(32), ' +
                                    'Case When Sact < 0 '                              +
                                         'Then '  + @w_comilla + 'C' + @w_comilla + ' ' +
                                         'Else '  + @w_comilla + 'A' + @w_comilla + ' ' +
                                    'End Clave, ' + @w_comilla + Cast(@w_fechaCaptura As Varchar) + @w_comilla + ', ' +
                                    'Sector_id,     Sucursal_id, Region_id, ' +
                                    'Case When Sact < 0 ' +
                                         'Then Abs(SAct) ' +
                                         'Else 0 '    +
                                    'End  Importe_Cargo, ' +
                                    'Case When Sact > 0 '  +
                                         'Then Abs(SAct) '      +
                                         'Else 0 '         +
                                    'End Importe_Abono, Concat(' + @w_comilla + 'Cierre ejercicio ' + @w_comilla + ', ' + Cast(@PnAnio As Varchar)+ '), ' +
                                    'Null TipoPolizaConta, Null ReferenciaFiscal, Null Fecha_Doc, Ejercicio, ' +
                                    'mes ' +
                            'From   dbo.CatalogoAuxiliar a With (Nolock) ' +
                            'Where  ejercicio = '   + Cast(@PnAnio As Varchar) + ' ' +
                            'And    mes       = '   + Cast(@PnMes  As Varchar) + ' ' +
                            'And    niv       = 1 ' +
                            'And    region_id = '   + Cast(@w_Region_id As Varchar) + ' ' +
                            'And    Sact     != 0 ' + @w_filtro;
            End
         Else
            Begin
               Set @w_sql = 'Select ' + @w_comilla + @w_numPoliza + @w_comilla + ', Row_number () Over (Order By llave ), Moneda, ' + @w_comilla + Cast(@w_Fecha_Mov As Varchar) + @w_comilla + ', ' +
                                    'Llave,    Concat(' + @w_comilla + 'Cierre ejercicio ' + @w_comilla + ',' + Cast(@PnAnio As Varchar) + '), Abs(Sact),   Char(32), ' +
                                    'Case When Sact < 0 '                              +
                                         'Then '  + @w_comilla + 'C' + @w_comilla + ' ' +
                                         'Else '  + @w_comilla + 'A' + @w_comilla + ' ' +
                                    'End Clave, ' + @w_comilla + Cast(@w_fechaCaptura As Varchar) + @w_comilla + ', ' +
                                    @w_comilla + '00' + @w_comilla + ' Sector_id,     0 Sucursal_id, 0 Region_id, ' +
                                    'Case When Sact < 0 ' +
                                         'Then Abs(SAct) ' +
                                         'Else 0 '    +
                                    'End  Importe_Cargo, ' +
                                    'Case When Sact > 0 '  +
                                         'Then Abs(SAct) '      +
                                         'Else 0 '         +
                                    'End Importe_Abono, Concat(' + @w_comilla + 'Cierre ejercicio ' + @w_comilla + ', ' + Cast(@PnAnio As Varchar)+ '), ' +
                                    'Null TipoPolizaConta, Null ReferenciaFiscal, Null Fecha_Doc, Ejercicio, ' +
                                    'mes ' +
                            'From   dbo.Catalogo a With (Nolock) ' +
                            'Where  ejercicio = '   + Cast(@PnAnio As Varchar) + ' ' +
                            'And    mes       = '   + Cast(@PnMes  As Varchar) + ' ' +
                            'And    niv       = 1 ' +
                            'And    Sact     != 0 ' + @w_filtro;
            End

         Begin Try
            Insert Into dbo.MovimientosAnio
           (Referencia,      Cons,             Moneda,        Fecha_mov,
            Llave,           Concepto,         Importe,       Documento,
            Clave,           FecCap,           Sector_id,     Sucursal_id,
            Region_id,       Importe_Cargo,    Importe_Abono, Descripcion,
            TipoPolizaConta, ReferenciaFiscal, Fecha_Doc,     Ejercicio,
            mes)
            Execute (@w_sql)
            Set @w_registro = @@Rowcount;
         End Try

         Begin Catch
            Select  @w_Error      = @@Error,
                    @w_linea      = Error_line(),
                    @w_desc_error = Substring (Error_Message(), 1, 200)

         End Catch

         If IsNull(@w_error, 0) <> 0
            Begin
               Rollback Transaction

               Select @PnEstatus = @w_error,
                      @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

               Close      C_Region_id
               Deallocate C_Region_id
               Set Xact_Abort Off
               Goto Salida
            End

         If @w_registro = 0
            Begin
               Rollback Transaction

               Select @PnEstatus = 8172,
                      @PsMensaje = dbo.Fn_Busca_MensajeError (@w_operacion, @PnEstatus);

               Close      C_Region_id
               Deallocate C_Region_id
               Set Xact_Abort Off
               Goto Salida
            End

--
-- Consulta de los Cargos y Abonos del período.
--

         Select @w_importeDebe  = Sum(Case When clave = 'C'
                                           Then Importe
                                           Else 0
                                      End),
                @w_importeHaber = Sum(Case When clave = 'A'
                                           Then Importe
                                           Else 0
                                      End)
         From   dbo.MovimientosAnio With (Nolock)
         Where  Referencia    = @w_numPoliza
         And    Fecha_mov     = @w_fecha_Mov
         And    ejercicio     = @PnAnio
         And    mes           = @PnMes;

--
-- Se calcula la Utilidad / Perdida del periodo.
--


         Set @w_importeSaldo = @w_importeDebe - @w_importeHaber

         If @w_importeSaldo < 0
            Begin
               Select @w_clave      = 'C',
                      @w_importeCar = @w_importeSaldo,
                      @w_importeAbo = 0;
            End;
         Else
            Begin
               Select @w_clave      = 'A',
                      @w_importeCar = 0,
                      @w_importeAbo = @w_importeSaldo;
            End;

         Set @w_registro = @w_registro + 1

         Insert Into dbo.MovimientosAnio
        (Referencia,      Cons,             Moneda,        Fecha_mov,
         Llave,           Concepto,         Importe,       Documento,
         Clave,           FecCap,           Sector_id,     Sucursal_id,
         Region_id,       Importe_Cargo,    Importe_Abono, Descripcion,
         TipoPolizaConta, ReferenciaFiscal, Fecha_Doc,     Ejercicio,
         mes)
         Select @w_numPoliza, @w_registro,               '00',          @w_Fecha_Mov,
                @w_llave,     Concat('Cierre ejercicio', @PnAnio),      Abs(@w_importeSaldo), Char(32),
                @w_clave,     @w_fechaCaptura,           @w_sector_id,  @w_Sucursal_id,
                @w_Region_id, @w_importeCar,             @w_importeAbo, Concat('Cierre ejercicio', @PnAnio),
                Null,         Null,                      Null,          @PnAnio,
                @PnMes;


         Select @w_importeDebe  = Sum(Case When clave = 'C'
                                           Then Importe
                                           Else 0
                                      End),
                @w_importeHaber = Sum(Case When clave = 'A'
                                           Then Importe
                                           Else 0
                                      End),
                @w_registro     = Count(1)
         From   dbo.MovimientosAnio With (Nolock)
         Where  Referencia    = @w_numPoliza
         And    Fecha_mov     = @w_fecha_Mov
         And    ejercicio     = @PnAnio
         And    mes           = @PnMes;

         Begin Try
            Update dbo.PolizaAnio
            Set    Cargos = @w_importeDebe,
                   Abonos = @w_importeHaber,
                   TCons  = @w_registro,
                   status = Case When @w_importeDebe = @w_importeHaber
                                 Then 2
                                 Else 3
                            End
            From   dbo.PolizaAnio
            Where  Referencia    = @w_numPoliza
            And    Fecha_Mov     = @w_fecha_Mov
            And    ejercicio     = @PnAnio
            And    mes           = @PnMes;

         End Try

         Begin Catch
            Select  @w_Error      = @@Error,
                    @w_linea      = Error_line(),
                    @w_desc_error = Substring (Error_Message(), 1, 230)
         End   Catch

         If Isnull(@w_Error, 0) <> 0
            Begin
               Select @PnEstatus = @w_error,
                      @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

               Set Xact_Abort Off
               Return

            End
      End

      Close      C_Region_id
      Deallocate C_Region_id

   Commit Transaction

Salida:

   Set Xact_Abort Off
   Return

End
1> 2> 3> 4> 5> 6> 7> 8> 9> 10> 11> 12> 13> 14> 15> 16> 17> 18> 19> 20> 21> 22> 23> 24> 25> 26> 27> 28> 29> 30> 31> 32> 33> 34> 35> 36> 
--
-- Comentarios.
--

Declare
   @w_valor          Varchar(1500) = 'Genera el asiento Contable de Cierre Ejercicio.',
   @w_procedimiento  Varchar( 100) = 'Spp_generaAsientoCierreAnio'


If Not Exists (Select Top 1 1
               From   sys.extended_properties a
               Join   sysobjects  b
               On     b.xtype   = 'P'
               And    b.name    = @w_procedimiento
               And    b.id      = a.major_id)

   Begin
      Execute  sp_addextendedproperty @name       = N'MS_Description',
                                      @value      = @w_valor,
                                      @level0type = 'Schema',
                                      @level0name = N'Dbo',
                                      @level1type = 'Procedure',
                                      @level1name = @w_procedimiento;

   End
Else
   Begin
      Execute sp_updateextendedproperty @name       = 'MS_Description',
                                        @value      = @w_valor,
                                        @level0type = 'Schema',
                                        @level0name = N'Dbo',
                                        @level1type = 'Procedure',
                                        @level1name = @w_procedimiento
   End


-- Declare
   -- @PnAnio                Smallint            = 2024,
   -- @PnMes                 Tinyint             = 8,
   -- @PnEstatus             Integer             = 0,
   -- @PsMensaje             Varchar( 250)       = ' ' ;
-- Begin

   -- Execute dbo.Spp_actualizaSaldosMes @PnAnio      = @PnAnio,
                                      -- @PnMes       = @PnMes,
                                      -- @PnEstatus   = @PnEstatus Output,
                                      -- @PsMensaje   = @PsMensaje Output;

   -- Select @PnEstatus, @PsMensaje
   -- Return
-- End
-- Go

--

-- Objeto:        Spp_actualizaSaldosMes.
-- Objetivo:      Actualiza los saldos contables de un mes al momento del cierre.
-- Fecha:         27/08/2024
-- Programador:   Pedro Zambrano
-- Versión:       1


*/

Create Or Alter Procedure dbo.Spp_actualizaSaldosMes
  (@PnAnio                Smallint,
   @PnMes                 Tinyint,
   @PsUsuario             Varchar(  10)       = Null,
   @PnEstatus             Integer             = 0   Output,
   @PsMensaje             Varchar( 250)       = ' ' Output)
As

Declare
   @w_Error             Integer,
   @w_linea             Integer,
   @w_operacion         Integer,
   @w_idEstatus         Tinyint,
   @w_desc_error        Varchar(250),
   @w_referencia        Varchar( 20),
   @w_idusuario         Varchar(  Max),
   @w_anioAnterior      Smallint,
   @w_mesAnterior       Smallint,
   @w_anioProximo       Smallint,
   @w_mesProximo        Smallint,
   @w_mesFin            Smallint,
   @w_fechaCaptura      Datetime,
   @w_usuario           Nvarchar(  20),
   @w_sql               NVarchar(1500),
   @w_param             NVarchar( 750),
   @w_comilla           Char(1);

Begin
   Set Nocount       On
   Set Xact_Abort    On
   Set Ansi_Nulls    Off

   Select @PnEstatus         = 0,
          @PsMensaje         = Null,
          @w_operacion       = 9999,
          @w_fechaCaptura    = Getdate();

--
-- Obtención del usuario de la aplicación para procesos batch.
--

   If @PsUsuario Is Null
      Begin
         Select @w_idusuario = parametroChar
         From   dbo.conParametrosGralesTbl
         Where  idParametroGral = 6;

         Select @w_sql   = Concat('Select @o_usuario = dbo.Fn_Desencripta_cadena (', @w_idusuario, ')'),
                @w_param = '@o_usuario    Nvarchar(20) Output';

         Begin Try
            Execute Sp_executeSql @w_sql, @w_param, @o_usuario = @w_usuario Output
         End Try

         Begin Catch
            Select  @w_Error      = @@Error,
                    @w_linea      = Error_line(),
                    @w_desc_error = Substring (Error_Message(), 1, 200)

         End   Catch

         If @w_error != 0
            Begin
               Select @w_error, @w_desc_error;

               Goto Salida
            End
      End
   Else
      Begin
         Set @w_usuario = @PsUsuario
      End

--
-- Validaciones
--

   Select  Top 1 @w_idEstatus = idEstatus
   From    dbo.ejercicios With (Nolock)
   Where   ejercicio = @PnAnio;
   If @@Rowcount = 0
      Begin
         Select @PnEstatus  = 8021,
                @PsMensaje =  'Error.: ' + (dbo.Fn_Busca_MensajeError(@w_operacion, @PnEstatus))

         Set Xact_Abort Off
         Return
      End

   If @w_idEstatus != 1
      Begin
         Select @PnEstatus  = 8022,
                @PsMensaje =  'Error.: ' + (dbo.Fn_Busca_MensajeError(@w_operacion, @PnEstatus))

         Set Xact_Abort Off
         Return
      End

   If Not Exists ( Select Top 1 1
                   From   dbo.catCriteriosTbl Whith (Nolock)
                   Where  criterio = 'mes'
                   And    valor    = @PnMes)
      Begin
         Select @PnEstatus  = 8023,
                @PsMensaje =  'Error.: ' + (dbo.Fn_Busca_MensajeError(@w_operacion, @PnEstatus))

         Set Xact_Abort Off
         Return
      End

   Select @w_idEstatus = idEstatus
   From   dbo.control With (Nolock)
   Where  ejercicio = @PnAnio
   And    mes       = @PnMes;
   If @@Rowcount = 0
      Begin
         Select @PnEstatus  = 8024,
                @PsMensaje =  'Error.: ' + (dbo.Fn_Busca_MensajeError(@w_operacion, @PnEstatus))

         Set Xact_Abort Off
         Return
      End

   If @w_idEstatus != 1
      Begin
         Select @PnEstatus  = 8025,
                @PsMensaje =  'Error.: ' + (dbo.Fn_Busca_MensajeError(@w_operacion, @PnEstatus))

         Set Xact_Abort Off
         Return
      End

--
-- Se ubica el último ejercicio y mes Cerrado
--

   Select @w_anioAnterior = Max(ejercicio)
   From   dbo.control With (Nolock)
   Where  idEstatus = 2;

   Select @w_mesAnterior = Max(mes)
   From   dbo.control With (Nolock)
   Where  ejercicio = @w_anioAnterior
   And    idEstatus = 2;

   Select @w_mesFin = Max(valor)
   From   dbo.catCriteriosTbl Whith (Nolock)
   Where  criterio = 'mes';

--
-- Creación de Tablas Temporales
--

  Create Table #TempCatalogo
  (Secuencia    Integer        Not Null Identity(1, 1) Primary key,
   Llave        Varchar(20)    Not Null,
   Moneda       Varchar( 2)    Not Null,
   Niv          Smallint       Not Null,
   Car          Decimal(18, 2) Not Null,
   Abo          Decimal(18, 2) Not Null,
   CarProceso   Decimal(18, 2) Not Null,
   AboProceso   Decimal(18, 2) Not Null,
   Ejercicio    Smallint       Not Null,
   mes          Tinyint        Not Null,
   Index TempCatalogoIdx01 Unique (llave, moneda, ejercicio, mes, Niv));

  Create Table #TempCatalogoAux
  (Secuencia    Integer        Not Null Identity(1, 1) Primary key,
   Llave        Varchar(20)    Not Null,
   Moneda       Varchar( 2)    Not Null,
   Niv          Smallint       Not Null,
   Sector_id    Integer        Not Null,
   Sucursal_id  Integer        Not Null,
   Region_id    Integer        Not Null,
   Car          Decimal(18, 2) Not Null,
   Abo          Decimal(18, 2) Not Null,
   CarProceso   Decimal(18, 2) Not Null,
   AboProceso   Decimal(18, 2) Not Null,
   Ejercicio    Smallint       Not Null,
   mes          Tinyint        Not Null,
   Index TempCatalogoAuxIdx01 Unique (llave, moneda, Sector_id,
         Sucursal_id, Region_id, ejercicio, mes, Niv));

--
-- Inicio de Proceso.
--


   Begin Transaction

--
-- Se actualiza los saldos de Catalogo
--

      Begin Try
         Update dbo.Catalogo
         Set    CarProceso = 0,
                AboProceso = 0,
                car        = 0,
                abo        = 0,
                sprom      = 0,
                sAct       = Sant
         Where  ejercicio = @PnAnio
         And    mes       = @PnMes;
      End Try

      Begin Catch
         Select  @w_Error      = @@Error,
                 @w_linea      = Error_line(),
                 @w_desc_error = Substring (Error_Message(), 1, 200)

      End Catch

      If IsNull(@w_error, 0) <> 0
         Begin
            Rollback Transaction

            Select @PnEstatus = @w_error,
                   @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

            Set Xact_Abort Off
            Goto Salida
         End


--
-- Se actualiza los saldos de Catalogo Auxiliar.
--
      Begin Try
         Update dbo.CatalogoAuxiliar
         Set    CarProceso = 0,
                AboProceso = 0,
                car        = 0,
                abo        = 0,
                sprom      = 0,
                sAct       = Sant
         From   dbo.CatalogoAuxiliar With (Nolock index(catalogoAuxiliarIdx01))
         Where  ejercicio = @PnAnio
         And    mes       = @PnMes;
      End Try

      Begin Catch
         Select  @w_Error      = @@Error,
                 @w_linea      = Error_line(),
                 @w_desc_error = Substring (Error_Message(), 1, 200)

      End Catch

      If IsNull(@w_error, 0) <> 0
         Begin
            Rollback Transaction

            Select @PnEstatus = @w_error,
                   @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

            Set Xact_Abort Off
            Goto Salida
         End

--
-- Traspaso de Polizas Anio a Poliza.
--

      Begin Try
         Insert Into dbo.poliza
        (Referencia, Fecha_mov, Fecha_Cap,       Concepto,
         Cargos,     Abonos,    TCons,           Usuario,
         TipoPoliza, Documento, Usuario_cancela, Fecha_Cancela,
         Status,     Mes_Mov,   TipoPolizaConta, FuenteDatos,
         ejercicio,  mes)
         Select Referencia, Fecha_Mov, Fecha_Cap,       Concepto,
                Cargos,     Abonos,    TCons,           Usuario,
                TipoPoliza, Documento, Usuario_cancela, Fecha_Cancela,
                Status,     Mes_Mov,   TipoPolizaConta, FuenteDatos,
                Ejercicio,  Mes
         From   dbo.polizaAnio a With (Nolock)
         Where  ejercicio  = @PnAnio
         And    mes        = @PnMes
         And    Not Exists ( Select Top 1 1
                             From   dbo.poliza With (Nolock Index (IX_FK_PolizaFk03))
                             Where  Ejercicio  = a.ejercicio
                             And    mes        = a.mes
                             And    fecha_mov  = a.fecha_mov
                             And    Referencia = a.Referencia);
      End Try

      Begin Catch
         Select  @w_Error      = @@Error,
                 @w_linea      = Error_line(),
                 @w_desc_error = Substring (Error_Message(), 1, 200)

      End Catch

      If IsNull(@w_error, 0) <> 0
         Begin
            Rollback Transaction

            Select @PnEstatus = @w_error,
                   @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

            Set Xact_Abort Off
            Goto Salida
         End

--
-- Alta de los movimientos de las pólizas.
--

      Begin Try
         Insert Into dbo.movimientos
        (Referencia,      Cons,             Moneda,        Fecha_mov,
         Llave,           Concepto,         Importe,       Documento,
         Clave,           FecCap,           Sector_id,     Sucursal_id,
         Region_id,       Importe_Cargo,    Importe_Abono, Descripcion,
         TipoPolizaConta, ReferenciaFiscal, Fecha_Doc,     Ejercicio,
         mes)
         Select Referencia,      Cons,             Moneda,        Fecha_mov,
                Llave,           Concepto,         Importe,       Documento,
                Clave,           FecCap,           Sector_id,     Sucursal_id,
                Region_id,       Importe_Cargo,    Importe_Abono, Descripcion,
                TipoPolizaConta, ReferenciaFiscal, Fecha_Doc,     Ejercicio,
                mes
         From   dbo.MovimientosAnio a With (Nolock)
         Where  ejercicio   = @PnAnio
         And    mes         = @PnMes
         And    Not Exists ( Select Top 1 1
                             From   dbo.movimientos With (Nolock index (IX_FK_MovimientosFk01))
                             Where  Referencia = a.Referencia
                             And    Cons       = a.cons
                             And    fecha_mov  = a.fecha_mov
                             And    Ejercicio  = a.ejercicio
                             And    mes        = a.mes)
      End Try

      Begin Catch
         Select  @w_Error      = @@Error,
                 @w_linea      = Error_line(),
                 @w_desc_error = Substring (Error_Message(), 1, 200)

      End Catch

      If IsNull(@w_error, 0) <> 0
         Begin
            Rollback Transaction

            Select @PnEstatus = @w_error,
                   @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

            Set Xact_Abort Off
            Goto Salida
         End


--
-- Consulta a los movimientos del período para el catálogo contable.
--

      Begin Try
         Insert Into  #TempCatalogo
        (Llave, Moneda,      Niv,          Car,
         Abo,   CarProceso,  AboProceso,   ejercicio,
         mes)
         Select a.Llave, a.moneda, 1 Niv,
                Sum(Case When Clave = 'C'
                         Then Importe
                         Else 0
                    End),
                Sum(Case When Clave = 'A'
                         Then Importe
                         Else 0
                    End),
                Sum(Case When Clave = 'C'
                         Then Importe
                         Else 0
                    End),
                Sum(Case When Clave  = 'A'
                         Then Importe
                         Else 0
                    End), a.ejercicio, a.mes
         From   dbo.Movimientos      a With (Nolock)
         Join   dbo.Catalogo         b With (Nolock)
         On     b.ejercicio      = a.ejercicio
         And    b.mes            = a.mes
         And    b.llave          = a.llave
         And    b.moneda         = a.moneda
         Where  a.ejercicio      = @PnAnio
         And    a.mes            = @PnMes
         Group  By  a.Llave, a.moneda, a.ejercicio, a.mes;
      End Try

      Begin Catch
         Select  @w_Error      = @@Error,
                 @w_linea      = Error_line(),
                 @w_desc_error = Substring (Error_Message(), 1, 200)

      End Catch

      If IsNull(@w_error, 0) <> 0
         Begin
            Rollback Transaction

            Select @PnEstatus = @w_error,
                   @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

            Set Xact_Abort Off
            Goto Salida
         End

      Begin Try
         Insert Into  #TempCatalogo
        (Llave, Moneda,      Niv,          Car,
         Abo,   CarProceso,  AboProceso,   ejercicio,
         mes)
         Select Concat(Substring(a.llave, 1, 12), Replicate(0, 4)), a.Moneda, 2 Niv,
                Sum(a.car), Sum(a.Abo), Sum(a.CarProceso), Sum(a.AboProceso),
                a.ejercicio, a.mes
         From   #TempCatalogo a
         Join   dbo.Catalogo b With (Nolock)
         On     b.llave     = Concat(Substring(a.llave, 1, 12), Replicate(0, 4))
         And    b.moneda    = a.moneda
         And    b.ejercicio = a.ejercicio
         And    b.mes       = a.mes
         Where  b.ejercicio = @PnAnio
         And    b.mes       = @PnMes
         And    a.Niv       = 1
         Group  By Substring(a.llave, 1, 12), a.Moneda, a.ejercicio, a.mes
         Union
         Select Concat(Substring(a.llave, 1, 10), Replicate(0, 6)), a.Moneda, 3 Niv,
                Sum(a.car), Sum(a.Abo), Sum(a.CarProceso), Sum(a.AboProceso),
                a.ejercicio, a.mes
         From   #TempCatalogo a
         Join   dbo.Catalogo  b With (Nolock)
         On     b.llave       = Concat(Substring(a.llave, 1, 10), Replicate(0, 6))
         And    b.moneda      = a.moneda
         And    b.ejercicio   = a.ejercicio
         And    b.mes         = a.mes
         Where  b.ejercicio   = @PnAnio
         And    b.mes         = @PnMes
         And    a.Niv         = 1
         Group  By Substring(a.llave, 1, 10), a.Moneda, a.ejercicio, a.mes
         Union
         Select Concat(Substring(a.llave, 1, 8), Replicate(0, 8)), a.Moneda, 4 Niv,
                Sum(a.car), Sum(a.Abo), Sum(a.CarProceso), Sum(a.AboProceso),
                a.ejercicio, a.mes
         From   #TempCatalogo a
         Join   dbo.Catalogo  b With (Nolock)
         On     b.llave        = Concat(Substring(a.llave, 1, 8), Replicate(0, 8))
         And    b.moneda       = a.moneda
         And    b.ejercicio    = a.ejercicio
         And    b.mes          = a.mes
         Where  b.ejercicio    = @PnAnio
         And    b.mes          = @PnMes
         And    a.Niv          = 1
         Group  By Substring(a.llave, 1, 8), a.Moneda, a.ejercicio, a.mes
         Union
         Select Concat(Substring(a.llave, 1, 6), Replicate(0, 10)), a.Moneda, 5 Niv,
                Sum(a.car), Sum(a.Abo), Sum(a.CarProceso), Sum(a.AboProceso),
                a.ejercicio, a.mes
         From   #TempCatalogo a
         Join   dbo.Catalogo  b With (Nolock)
         On     b.llave         = Concat(Substring(a.llave, 1, 6), Replicate(0, 10))
         And    b.moneda        = a.moneda
         And    b.ejercicio     = a.ejercicio
         And    b.mes           = a.mes
         Where  b.ejercicio     = @PnAnio
         And    b.mes           = @PnMes
         And    a.Niv           = 1
         Group  By Substring(a.llave, 1, 6), a.Moneda, a.ejercicio, a.mes
         Union
         Select Concat(Substring(a.llave, 1, 4), Replicate(0, 12)), a.Moneda, 6 Niv,
                Sum(a.car), Sum(a.Abo), Sum(a.CarProceso), Sum(a.AboProceso),
                a.ejercicio, a.mes
         From   #TempCatalogo a
         Join   dbo.Catalogo  b With (Nolock)
         On     b.llave         = Concat(Substring(a.llave, 1, 4), Replicate(0, 12))
         And    b.moneda        = a.moneda
         And    b.ejercicio     = a.ejercicio
         And    b.mes           = a.mes
         Where  b.ejercicio     = @PnAnio
         And    b.mes           = @PnMes
         And    a.Niv           = 1
         Group  By Substring(a.llave, 1, 4), a.Moneda, a.ejercicio, a.mes
         Union
         Select Concat(Substring(a.llave, 1, 2), Replicate(0, 14)), a.Moneda, 7 Niv,
                Sum(a.car), Sum(a.Abo), Sum(a.CarProceso), Sum(a.AboProceso),
                a.ejercicio, a.mes
         From   #TempCatalogo a
         Join   dbo.Catalogo  b With (Nolock)
         On     b.llave         = Concat(Substring(a.llave, 1, 2), Replicate(0, 14))
         And    b.moneda        = a.moneda
         And    b.mes           = a.mes
         Where  b.ejercicio     = @PnAnio
         And    b.mes           = @PnMes
         And    a.Niv           = 1
         Group  By Substring(a.llave, 1, 2), a.Moneda, a.ejercicio, a.mes
         Union
         Select Concat(Substring(a.llave, 1, 1), Replicate(0, 15)), a.Moneda, 8 Niv,
                Sum(a.car), Sum(a.Abo), Sum(a.CarProceso), Sum(a.AboProceso),
                a.ejercicio, a.mes
         From   #TempCatalogo a
         Join   dbo.Catalogo  b With (Nolock)
         On     b.llave         = Concat(Substring(a.llave, 1, 1), Replicate(0, 15))
         And    b.moneda        = a.moneda
         And    b.mes           = a.mes
         Where  b.ejercicio     = @PnAnio
         And    b.mes           = @PnMes
         And    a.Niv           = 1
         Group  By Substring(a.llave, 1, 1), a.Moneda, a.ejercicio, a.mes
      End Try

      Begin Catch
         Select  @w_Error      = @@Error,
                 @w_linea      = Error_line(),
                 @w_desc_error = Substring (Error_Message(), 1, 200)

      End Catch

      If IsNull(@w_error, 0) <> 0
         Begin
            Rollback Transaction

            Select @PnEstatus = @w_error,
                   @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

            Set Xact_Abort Off
            Goto Salida
         End

--
-- ALta a los movimientos del período para el catálogo Auxiliar
--

      Begin Try
         Insert Into  #TempCatalogoAux
        (Llave,       Moneda,     Niv,       Sector_id,
         Sucursal_id, Region_id,  Car,       Abo,
         CarProceso,  AboProceso, ejercicio, mes)
         Select a.Llave,       a.moneda,    1 Niv,         a.Sector_id,
                a.Sucursal_id, a.Region_id,
                Sum(Case When Clave = 'C'
                         Then Importe
                         Else 0
                    End),
                Sum(Case When Clave = 'A'
                         Then Importe
                         Else 0
                    End),
                Sum(Case When Clave = 'C'
                         Then Importe
                         Else 0
                    End),
                Sum(Case When Clave = 'A'
                         Then Importe
                         Else 0
                    End), a.ejercicio, a.mes
         From   dbo.Movimientos         a With (Nolock)
         Join   dbo.catalogoAuxiliar    b With (Nolock)
         On     b.llave          = a.llave
         And    b.moneda         = a.moneda
         And    b.Sucursal_id    = a.Sucursal_id
         And    b.Region_id      = a.Region_id
         And    b.ejercicio      = a.ejercicio
         And    b.mes            = a.mes
         Where  b.ejercicio      = @PnAnio
         And    b.mes            = @PnMes
         Group  By  a.Llave,     a.moneda,      a.Sector_id, a.Sucursal_id,
                    a.Region_id, a.ejercicio,   a.mes;
      End Try

      Begin Catch
         Select  @w_Error      = @@Error,
                 @w_linea      = Error_line(),
                 @w_desc_error = Substring (Error_Message(), 1, 200)

      End Catch

      If IsNull(@w_error, 0) <> 0
         Begin
            Rollback Transaction

            Select @PnEstatus = @w_error,
                   @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

            Set Xact_Abort Off
            Goto Salida
         End

      Begin Try
         Insert Into  #TempCatalogoAux
        (Llave,       Moneda,     Niv,       Sector_id,
         Sucursal_id, Region_id,  Car,       Abo,
         CarProceso,  AboProceso, ejercicio, mes)
         Select Concat(Substring(a.llave, 1, 12), Replicate(0, 4)), a.Moneda, 2 Niv, a.Sector_id,
                a.Sucursal_id, a.Region_id,
                Sum(a.car),  Sum(a.Abo), Sum(a.carProceso), Sum(a.AboProceso),
                a.ejercicio, a.mes
         From   #TempCatalogoAux       a
         Join   dbo.CatalogoAuxiliar   b With (Nolock)
         On     b.llave          = Concat(Substring(a.llave, 1, 12), Replicate(0, 4))
         And    b.moneda         = a.moneda
         And    b.Sucursal_id    = a.Sucursal_id
         And    b.Region_id      = a.Region_id
         And    b.ejercicio      = a.ejercicio
         And    b.mes            = a.mes
         Where  b.ejercicio      = @PnAnio
         And    b.mes            = @PnMes
         And    a.Niv            = 1
         Group  By Substring(a.llave, 1, 12), a.Moneda,    a.Sector_id,
                a.Sucursal_id, a.Region_id,   a.ejercicio, a.mes
         Union
         Select Concat(Substring(a.llave, 1, 10), Replicate(0, 6)), a.Moneda, 3 Niv, a.Sector_id,
                a.Sucursal_id, a.Region_id,
                Sum(a.car),  Sum(a.Abo), Sum(a.carProceso), Sum(a.AboProceso),
                a.ejercicio, a.mes
         From   #TempCatalogoAux     a
         Join   dbo.CatalogoAuxiliar b With (Nolock)
         On     b.llave                 = Concat(Substring(a.llave, 1, 10), Replicate(0, 6))
         And    b.moneda                = a.moneda
         And    b.Sucursal_id           = a.Sucursal_id
         And    b.Region_id             = a.Region_id
         And    b.ejercicio             = a.ejercicio
         And    b.mes                   = a.mes
         Where  b.ejercicio             = @PnAnio
         And    b.mes                   = @PnMes
         And    a.Niv                   = 1
         Group  By Substring(a.llave, 1, 10), a.Moneda, a.Sector_id,
                a.Sucursal_id, a.Region_id, a.ejercicio, a.mes
         Union
         Select Concat(Substring(a.llave, 1, 8), Replicate(0, 8)), a.Moneda, 4 Niv, a.Sector_id,
                a.Sucursal_id, a.Region_id,
                Sum(a.car),  Sum(a.Abo), Sum(a.carProceso), Sum(a.AboProceso),
                a.ejercicio, a.mes
         From   #TempCatalogoAux        a
         Join   dbo.CatalogoAuxiliar    b With (Nolock)
         On     b.llave                 = Concat(Substring(a.llave, 1, 8), Replicate(0, 8))
         And    b.moneda                = a.moneda
         And    b.Sucursal_id           = a.Sucursal_id
         And    b.Region_id             = a.Region_id
         And    b.ejercicio             = a.ejercicio
         And    b.mes                   = a.mes
         Where  b.ejercicio             = @PnAnio
         And    b.mes                   = @PnMes
         And    a.Niv                   = 1
         Group  By Substring(a.llave, 1, 8), a.Moneda,    a.Sector_id,
                a.Sucursal_id, a.Region_id,      a.ejercicio, a.mes
         Union
         Select Concat(Substring(a.llave, 1, 6), Replicate(0, 10)), a.Moneda, 5 Niv, a.Sector_id,
                a.Sucursal_id, a.Region_id,
                Sum(a.car),    Sum(a.Abo), Sum(a.carProceso), Sum(a.AboProceso),
                a.ejercicio,   a.mes
         From   #TempCatalogoAux         a
         Join   dbo.CatalogoAuxiliar     b With (Nolock)
         On     b.llave                 = Concat(Substring(a.llave, 1, 6), Replicate(0, 12))
         And    b.moneda                = a.moneda
         And    b.Sucursal_id           = a.Sucursal_id
         And    b.Region_id             = a.Region_id
         And    b.ejercicio             = a.ejercicio
         And    b.mes                   = a.mes
         Where  b.ejercicio             = @PnAnio
         And    b.mes                   = @PnMes
         And    a.Niv                   = 1
         Group  By Substring(a.llave, 1, 6), a.Moneda, a.Sector_id,
                a.Sucursal_id, a.Region_id, a.ejercicio, a.mes
         Union
         Select Concat(Substring(a.llave, 1, 4), Replicate(0, 12)), a.Moneda, 6 Niv, a.Sector_id,
                a.Sucursal_id, a.Region_id,
                Sum(a.car),    Sum(a.Abo), Sum(a.carProceso), Sum(a.AboProceso),
                a.ejercicio,   a.mes
         From   #TempCatalogoAux      a
         Join   dbo.CatalogoAuxiliar  b With (Nolock)
         On     b.llave                 = Concat(Substring(a.llave, 1, 4), Replicate(0, 12))
         And    b.moneda                = a.moneda
         And    b.Sucursal_id           = a.Sucursal_id
         And    b.Region_id             = a.Region_id
         And    b.ejercicio             = a.ejercicio
         And    b.mes                   = a.mes
         Where  b.ejercicio             = @PnAnio
         And    b.mes                   = @PnMes
         And    a.Niv                   = 1
         Group  By Substring(a.llave, 1, 4), a.Moneda, a.Sector_id,
                a.Sucursal_id, a.Region_id, a.ejercicio, a.mes
         Union
         Select Concat(Substring(a.llave, 1, 2), Replicate(0, 14)), a.Moneda, 7 Niv, a.Sector_id,
                a.Sucursal_id, a.Region_id,
                Sum(a.car),    Sum(a.Abo), Sum(a.carProceso), Sum(a.AboProceso),
                a.ejercicio,   a.mes
         From   #TempCatalogoAux     a
         Join   dbo.CatalogoAuxiliar b With (Nolock)
         On     b.llave                 = Concat(Substring(a.llave, 1, 2), Replicate(0, 14))
         And    b.moneda                = a.moneda
         And    b.Sucursal_id           = a.Sucursal_id
         And    b.Region_id             = a.Region_id
         And    b.ejercicio             = a.ejercicio
         And    b.mes                   = a.mes
         Where  b.ejercicio             = @PnAnio
         And    b.mes                   = @PnMes
         And    a.Niv                   = 1
         Group  By Substring(a.llave, 1, 2), a.Moneda,    a.Sector_id,
                a.Sucursal_id, a.Region_id,  a.ejercicio, a.mes
         Union
         Select Concat(Substring(a.llave, 1, 1), Replicate(0, 15)), a.Moneda, 8 Niv, a.Sector_id,
                a.Sucursal_id, a.Region_id,
                Sum(a.car),    Sum(a.Abo), Sum(a.carProceso), Sum(a.AboProceso),
                a.ejercicio,   a.mes
         From   #TempCatalogoAux      a
         Join   dbo.CatalogoAuxiliar  b With (Nolock)
         On     b.llave                 = Concat(Substring(a.llave, 1, 1), Replicate(0, 15))
         And    b.moneda                = a.moneda
         And    b.Sucursal_id           = a.Sucursal_id
         And    b.Region_id             = a.Region_id
         And    b.ejercicio             = a.ejercicio
         And    b.mes                   = a.mes
         Where  b.ejercicio             = @PnAnio
         And    b.mes                   = @PnMes
         And    a.Niv                   = 1
         Group  By Substring(a.llave, 1, 1), a.Moneda,   a.Sector_id,
                a.Sucursal_id, a.Region_id, a.ejercicio, a.mes
      End Try

      Begin Catch
         Select  @w_Error      = @@Error,
                 @w_linea      = Error_line(),
                 @w_desc_error = Substring (Error_Message(), 1, 200)

      End Catch

      If IsNull(@w_error, 0) <> 0
         Begin
            Rollback Transaction

            Select @PnEstatus = @w_error,
                   @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

            Set Xact_Abort Off
            Goto Salida
         End

--
-- Actualización del catálogo del período.
--

      Begin Try
         Update dbo.Catalogo
         Set    CarProceso = b.CarProceso,
                AboProceso = b.AboProceso,
                car        = b.car,
                abo        = b.Abo
         From   dbo.Catalogo  a
         Join   #TempCatalogo b  With (Nolock)
         On     b.llave     = a.llave
         And    b.moneda    = a.moneda
         And    b.ejercicio = a.ejercicio
         And    b.mes       = a.mes
         Where  a.ejercicio = @PnAnio
         And    a.mes       = @PnMes

         Update dbo.Catalogo
         Set    sAct       = a.SAnt + a.Car - a.abo
         From   dbo.Catalogo a With (Nolock)
         Where  a.ejercicio = @PnAnio
         And    a.mes       = @PnMes

      End Try


      Begin Catch
         Select  @w_Error      = @@Error,
                 @w_linea      = Error_line(),
                 @w_desc_error = Substring (Error_Message(), 1, 200)

      End Catch

      If IsNull(@w_error, 0) <> 0
         Begin
            Rollback Transaction

            Select @PnEstatus = @w_error,
                   @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

            Set Xact_Abort Off
            Goto Salida
         End

--
-- Actualización del catálogo Auxiliar.
--

      Begin Try
         Update dbo.CatalogoAuxiliar
         Set    CarProceso = b.CarProceso,
                AboProceso = b.AboProceso,
                car        = b.car,
                abo        = b.Abo
         From   dbo.CatalogoAuxiliar      a With (Nolock index(catalogoAuxiliarIdx01))
         Join   #TempCatalogoAux          b
         On     b.llave       = a.llave
         And    b.moneda      = a.moneda
         And    b.Sector_id   = a.Sector_id
         And    b.Sucursal_id = a.Sucursal_id
         And    b.Region_id   = a.Region_id
         And    b.ejercicio   = a.ejercicio
         And    b.mes         = a.mes
         Where  a.ejercicio   = @PnAnio
         And    a.mes         = @PnMes;

         Update dbo.CatalogoAuxiliar
         Set    sAct       = a.SAnt + a.Car - a.abo
         From   dbo.CatalogoAuxiliar a With (Nolock index(catalogoAuxiliarIdx01))
         Where  a.ejercicio = @PnAnio
         And    a.mes       = @PnMes

      End Try

      Begin Catch
         Select  @w_Error      = @@Error,
                 @w_linea      = Error_line(),
                 @w_desc_error = Substring (Error_Message(), 1, 200)

      End Catch

       If IsNull(@w_error, 0) <> 0
          Begin
             Rollback Transaction

             Select @PnEstatus = @w_error,
                    @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

             Set Xact_Abort Off
             Goto Salida
          End

--
-- Actualización del catálogo del mes con los valores reportados del período.
--

      Begin Try
         Update dbo.catalogo
         Set    SAnt        = a.SAnt        + b.SAct,
                SAct        = a.SAct        + b.SAct,
                SAntProceso = a.SAntProceso + b.SAct
         From   dbo.catalogo           a With (Nolock)
         Join   dbo.catalogoReporteTbl b With (Nolock)
         On     b.ejercicio = a.ejercicio
         And    b.mes       = a.mes
         And    b.Llave     = a.llave
         And    b.mes       = a.mes
         Where  a.ejercicio = @PnAnio
         And    a.mes       = @PnMes

      End Try

      Begin Catch
         Select  @w_Error      = @@Error,
                 @w_linea      = Error_line(),
                 @w_desc_error = Substring (Error_Message(), 1, 200)

      End Catch

      If IsNull(@w_error, 0) <> 0
         Begin
            Rollback Transaction

            Select @PnEstatus = @w_error,
                   @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

            Set Xact_Abort Off
            Goto Salida
         End

--
-- Actualización del catálogo Auxiliar, con los valores reportados.
--

      Begin Try
         Update dbo.CatalogoAuxiliar
         Set    SAnt        = a.SAnt        + b.SAct,
                SAct        = a.SAct        + b.SAct,
                SAntProceso = a.SAntProceso + b.SAct
         From   dbo.CatalogoAuxiliar      a With (Nolock)
         Join   dbo.catalogoAuxReporteTbl b With (Nolock)
         On     b.llave       = a.llave
         And    b.moneda_id   = a.moneda
         And    b.Sector_id   = a.Sector_id
         And    b.Sucursal_id = a.Sucursal_id
         And    b.Region_id   = a.Region_id
         And    b.ejercicio   = a.ejercicio
         And    b.mes         = a.mes
         Where  a.ejercicio   = @PnAnio
         And    a.mes         = @PnMes;

      End Try

      Begin Catch
         Select  @w_Error      = @@Error,
                 @w_linea      = Error_line(),
                 @w_desc_error = Substring (Error_Message(), 1, 200)

      End Catch

      If IsNull(@w_error, 0) <> 0
         Begin
            Rollback Transaction

            Select @PnEstatus = @w_error,
                   @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

            Set Xact_Abort Off
            Goto Salida
         End

--
-- Depuración del detalle de los movimientos contables
--

      If Exists ( Select Top 1 1
                  From   dbo.MovimientosAnio With (Nolock)
                  Where  ejercicio = @PnAnio
                  And    mes       = @PnMes)
         Begin
            Begin Try
               Delete dbo.MovimientosAnio
               Where  ejercicio = @PnAnio
               And    mes       = @PnMes;

            End Try

            Begin Catch
               Select  @w_Error      = @@Error,
                       @w_linea      = Error_line(),
                       @w_desc_error = Substring (Error_Message(), 1, 200)

            End Catch

            If IsNull(@w_error, 0) <> 0
               Begin
                  Rollback Transaction

                  Select @PnEstatus = @w_error,
                         @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

                  Set Xact_Abort Off
                  Goto Salida
               End

         End

--
-- Depuración del Cabecero de los movimientos contables
--

      If Exists ( Select Top 1 1
                  From   dbo.PolizaAnio With (Nolock)
                  Where  ejercicio = @PnAnio
                  And    mes       = @PnMes)
         Begin
            Begin Try
               Delete dbo.PolizaAnio
               Where  ejercicio = @PnAnio
               And    mes       = @PnMes;

            End Try

            Begin Catch
               Select  @w_Error      = @@Error,
                       @w_linea      = Error_line(),
                       @w_desc_error = Substring (Error_Message(), 1, 200)

            End Catch

            If IsNull(@w_error, 0) <> 0
               Begin
                  Rollback Transaction

                  Select @PnEstatus = @w_error,
                         @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

                  Set Xact_Abort Off
                  Goto Salida
               End

         End

--
-- Fin del proceso.
--

   Commit Transaction

   Set @PsMensaje = 'Aplicación de Saldo realizado con éxito!'

Salida:

   Set Xact_Abort Off
   Return

End
1> 2> 3> 4> 5> 6> 7> 8> 9> 10> 11> 12> 13> 14> 15> 16> 17> 18> 19> 20> 21> 22> 23> 24> 25> 26> 27> 28> 29> 30> 31> 32> 33> 34> 35> 36> 
--
-- Comentarios.
--

Declare
   @w_valor          Varchar(1500) = 'Actualiza los saldos contables de un mes.',
   @w_procedimiento  Varchar( 100) = 'Spp_actualizaSaldosMes'


If Not Exists (Select Top 1 1
               From   sys.extended_properties a
               Join   sysobjects  b
               On     b.xtype   = 'P'
               And    b.name    = @w_procedimiento
               And    b.id      = a.major_id)

   Begin
      Execute  sp_addextendedproperty @name       = N'MS_Description',
                                      @value      = @w_valor,
                                      @level0type = 'Schema',
                                      @level0name = N'Dbo',
                                      @level1type = 'Procedure',
                                      @level1name = @w_procedimiento;

   End
Else
   Begin
      Execute sp_updateextendedproperty @name       = 'MS_Description',
                                        @value      = @w_valor,
                                        @level0type = 'Schema',
                                        @level0name = N'Dbo',
                                        @level1type = 'Procedure',
                                        @level1name = @w_procedimiento
   End


-- Declare
   -- @PnAnio                Smallint            = 2024,
   -- @PnMes                 Tinyint             = 13,
   -- @PnEstatus             Integer             = 0,
   -- @PsMensaje             Varchar( 250)       = ' ' ;
-- Begin

   -- Execute dbo.Spp_actualizaInicioEjercicio @PnAnio      = @PnAnio,
                                            -- @PnMes       = @PnMes,
                                            -- @PnEstatus   = @PnEstatus Output,
                                            -- @PsMensaje   = @PsMensaje Output;

   -- Select @PnEstatus, @PsMensaje
   -- Return
-- End
-- Go

--

-- Objeto:        Spp_actualizaInicioEjercicio.
-- Objetivo:      Mueve los saldos acumulados del ejercicio en cierre al Histórico
-- Fecha:         16/09/2024
-- Programador:   Pedro Zambrano
-- Versión:       1


*/

Create Or Alter Procedure dbo.Spp_actualizaInicioEjercicio
  (@PnAnio                Smallint,
   @PnMes                 Tinyint,
   @PnEstatus             Integer             = 0   Output,
   @PsMensaje             Varchar( 250)       = ' ' Output)
As

Declare
   @w_Error             Integer,
   @w_linea             Integer,
   @w_operacion         Integer,
   @w_idlogInic         Integer,
   @w_idlogFin          Integer,
   @w_idEstatus         Tinyint,
   @w_sucursable        Tinyint,
   @w_anioProximo       Smallint,
   @w_mesProximo        Smallint,
   @w_mesFin            Smallint,
   @w_fechaCaptura      Datetime,
   @w_desc_error        Varchar(250),
   @w_referencia        Varchar( 20),
   @w_idusuario         Varchar(Max),
   @w_ipAct             Varchar( 30),
   @w_usuario           Nvarchar(  20),
   @w_sql               NVarchar(1500),
   @w_param             NVarchar( 750),
   @w_comilla           Char(1);

Begin
   Set Nocount       On
   Set Xact_Abort    On
   Set Ansi_Nulls    Off

   Select @PnEstatus         = 0,
          @PsMensaje         = Null,
          @w_operacion       = 9999,
          @w_fechaCaptura    = Getdate(),
          @w_error           = 0,
          @w_desc_error      = Char(32),
          @w_sucursable      = Isnull(dbo.Fn_BuscaResultadosParametros(12, 'valor'), 0),
          @w_ipAct           = dbo.Fn_BuscaDireccionIP();

--
-- Registro de inicio de proceso.
--

   Insert dbo.logCierreInicioEjercicioTbl
  (Ejercicio, mes, descripcion, ipAct)
   Select @PnAnio, @PnMes, 'Inicio del Proceso de Cierre', @w_ipAct;
   Set @w_idlogInic = @@Identity

--
-- Obtención del usuario de la aplicación para procesos batch.
--

   Select @w_idusuario = parametroChar
   From   dbo.conParametrosGralesTbl
   Where  idParametroGral = 6;

   Select @w_sql   = Concat('Select @o_usuario = dbo.Fn_Desencripta_cadena (', @w_idusuario, ')'),
          @w_param = '@o_usuario    Nvarchar(20) Output';

   Begin Try
      Execute Sp_executeSql @w_sql, @w_param, @o_usuario = @w_usuario Output
   End Try

   Begin Catch
      Select  @w_Error      = @@Error,
              @w_linea      = Error_line(),
              @w_desc_error = Substring (Error_Message(), 1, 200)

   End   Catch

   If @w_error != 0
      Begin
         Select @PnEstatus = @w_error,
                @PsMensaje = @w_desc_error;

         Insert dbo.logCierreInicioEjercicioTbl
        (Ejercicio, mes, descripcion, idError, mensajeError, ipAct)
         Select @PnAnio, @PnMes, 'Búsqueda de Usuario Bath', @w_error, @PsMensaje, @w_ipAct;
         Set @w_idlogFin = @@Identity

         Goto Salida
      End

--
-- Validaciones
--

   Select  Top 1 @w_idEstatus = idEstatus
   From    dbo.ejercicios With (Nolock)
   Where   ejercicio = @PnAnio;
   If @@Rowcount = 0
      Begin
         Select @PnEstatus  = 8021,
                @PsMensaje =  'Error.: ' + (dbo.Fn_Busca_MensajeError(@w_operacion, @PnEstatus))

         Insert dbo.logCierreInicioEjercicioTbl
        (Ejercicio, mes, descripcion, idError, mensajeError, usuario, ipAct)
         Select @PnAnio, @PnMes, 'Consulta a la tabla ejercicios', @PnEstatus, @PsMensaje, @w_usuario, @w_ipAct;
         Set @w_idlogFin = @@Identity

         Goto Salida
      End

   If @w_idEstatus != 3
      Begin
         Select @PnEstatus  = 8022,
                @PsMensaje =  'Error.: ' + (dbo.Fn_Busca_MensajeError(@w_operacion, @PnEstatus))

         Insert dbo.logCierreInicioEjercicioTbl
        (Ejercicio, mes, descripcion, idError, mensajeError, usuario, ipAct)
         Select @PnAnio, @PnMes, 'Consulta a la tabla ejercicios', @PnEstatus, @PsMensaje, @w_usuario, @w_ipAct;
         Set @w_idlogFin = @@Identity

         Goto Salida
      End

   If Not Exists ( Select Top 1 1
                   From   dbo.catCriteriosTbl Whith (Nolock)
                   Where  criterio = 'mes'
                   And    valor    = @PnMes)
      Begin
         Select @PnEstatus  = 8023,
                @PsMensaje =  'Error.: ' + (dbo.Fn_Busca_MensajeError(@w_operacion, @PnEstatus))

         Insert dbo.logCierreInicioEjercicioTbl
        (Ejercicio, mes, descripcion, idError, mensajeError, usuario, ipAct)
         Select @PnAnio, @PnMes, 'Consulta a la tabla catCriteriosTbl',@PnEstatus, @PsMensaje, @w_usuario, @w_ipAct;
         Set @w_idlogFin = @@Identity

         Goto Salida
      End

   Select @w_idEstatus = idEstatus
   From   dbo.control With (Nolock)
   Where  ejercicio = @PnAnio
   And    mes       = @PnMes;
   If @@Rowcount = 0
      Begin
         Select @PnEstatus  = 8024,
                @PsMensaje =  'Error.: ' + (dbo.Fn_Busca_MensajeError(@w_operacion, @PnEstatus))

         Insert dbo.logCierreInicioEjercicioTbl
        (Ejercicio, mes, descripcion, idError, mensajeError, usuario, ipAct)
         Select @PnAnio, @PnMes, 'Consulta a la tabla control', @PnEstatus, @PsMensaje, @w_usuario, @w_ipAct;
         Set @w_idlogFin = @@Identity

         Goto Salida
      End

   If @w_idEstatus != 1
      Begin
         Select @PnEstatus  = 8025,
                @PsMensaje =  'Error.: ' + (dbo.Fn_Busca_MensajeError(@w_operacion, @PnEstatus))

         Insert dbo.logCierreInicioEjercicioTbl
        (Ejercicio, mes, descripcion, idError, mensajeError, usuario, ipAct)
         Select @PnAnio, @PnMes, 'Consulta a la tabla control', @PnEstatus, @PsMensaje, @w_usuario, @w_ipAct;
         Set @w_idlogFin = @@Identity

         Goto Salida
      End

--
-- Se ubica el último mes de proceso
--

   Select @w_mesFin = Max(valor)
   From   dbo.catCriteriosTbl Whith (Nolock)
   Where  criterio = 'mes';

   If @w_mesFin != @PnMes
      Begin
         Select @PnEstatus  = 8031,
                @PsMensaje =  'Error.: ' + (dbo.Fn_Busca_MensajeError(@w_operacion, @PnEstatus))

         Insert dbo.logCierreInicioEjercicioTbl
        (Ejercicio, mes, descripcion, idError, mensajeError, usuario, ipAct)
         Select @PnAnio, @PnMes, 'Validación del mes Final del Ejercicio', @PnEstatus, @PsMensaje, @w_usuario, @w_ipAct;
         Set @w_idlogFin = @@Identity

         Goto Salida
      End
--

   Select @w_mesProximo  = 0,
          @w_anioProximo = @PnAnio + 1;

--

--
-- Inicio de Proceso.
--


   Begin Transaction

--
-- Generación de nuevo ejercicio y mes
--
      Begin Try
         Update dbo.ejercicios
         Set    idEstatus = 2
         Where  ejercicio = @PnAnio;
      End Try

      Begin Catch
         Select  @w_Error      = @@Error,
                 @w_linea      = Error_line(),
                 @w_desc_error = Substring (Error_Message(), 1, 200)

      End Catch

      If IsNull(@w_error, 0) <> 0
         Begin
            Rollback Transaction

            Select @PnEstatus = @w_error,
                   @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

            Insert dbo.logCierreInicioEjercicioTbl
           (Ejercicio, mes, descripcion, idError, mensajeError, usuario, ipAct)
            Select @PnAnio, @PnMes, 'Actualizando la tabla ejercicios', @PnEstatus, @PsMensaje, @w_usuario, @w_ipAct;
            Set @w_idlogFin = @@Identity
         
            Set Xact_Abort Off
            Goto Salida
         End

      Begin Try
         Update dbo.control
         Set    idEstatus    = 2,
                FechaProceso = @w_fechaCaptura,
                usuario      = @w_usuario
         Where  ejercicio = @PnAnio
         And    Mes       = @PnMes;
      End Try

      Begin Catch
         Select  @w_Error      = @@Error,
                 @w_linea      = Error_line(),
                 @w_desc_error = Substring (Error_Message(), 1, 200)

      End Catch

      If IsNull(@w_error, 0) <> 0
         Begin
            Rollback Transaction

            Select @PnEstatus = @w_error,
                   @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

            Insert dbo.logCierreInicioEjercicioTbl
           (Ejercicio, mes, descripcion, idError, mensajeError, usuario, ipAct)
            Select @PnAnio, @PnMes, 'Actualizando la tabla control', @PnEstatus, @PsMensaje, @w_usuario, @w_ipAct;
            Set @w_idlogFin = @@Identity
         
            Set Xact_Abort Off
            Goto Salida
         End

      If Not Exists ( Select Top 1 1
                      From   dbo.Ejercicios With (Nolock)
                      Where  ejercicio = @w_anioProximo)
         Begin
            Begin Try
               Insert Into dbo.ejercicios
               (ejercicio, idEstatus)
               Select @w_anioProximo, 1
            End Try

            Begin Catch
               Select  @w_Error      = @@Error,
                       @w_linea      = Error_line(),
                       @w_desc_error = Substring (Error_Message(), 1, 200)

            End Catch

            If IsNull(@w_error, 0) <> 0
               Begin
                  Rollback Transaction

                  Select @PnEstatus = @w_error,
                         @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

                  Insert dbo.logCierreInicioEjercicioTbl
                 (Ejercicio, mes, descripcion, idError, mensajeError, usuario, ipAct)
                  Select @PnAnio, @PnMes, 'Actualizando la tabla Ejercicios', @PnEstatus, @PsMensaje, @w_usuario, @w_ipAct;
                  Set @w_idlogFin = @@Identity

                  Set Xact_Abort Off
                  Goto Salida
               End

        End
      Else
         Begin
            Begin Try
               Update dbo.ejercicios
               Set    idEstatus = 1
               Where  ejercicio = @w_anioProximo
            End Try

            Begin Catch
               Select  @w_Error      = @@Error,
                       @w_linea      = Error_line(),
                       @w_desc_error = Substring (Error_Message(), 1, 200)

            End Catch

            If IsNull(@w_error, 0) <> 0
               Begin
                  Rollback Transaction

                  Select @PnEstatus = @w_error,
                         @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

                  Insert dbo.logCierreInicioEjercicioTbl
                 (Ejercicio, mes, descripcion, idError, mensajeError, usuario, ipAct)
                  Select @PnAnio, @PnMes, 'Actualizando la tabla Ejercicios. ', @PnEstatus, @PsMensaje, @w_usuario, @w_ipAct;
                  Set @w_idlogFin = @@Identity

                  Set Xact_Abort Off
                  Goto Salida
               End
         End

      If Not Exists ( Select Top 1 1
                      From   dbo.control With (Nolock)
                      Where  ejercicio = @w_anioProximo
                      And    mes       = @w_mesProximo)
         Begin
            Begin Try
               Insert Into dbo.control
               (Ejercicio, Mes, idEstatus, FechaProceso,
                usuario)
               Select @w_anioProximo, @w_mesProximo, 1, @w_fechaCaptura,
                      @w_usuario
            End Try

            Begin Catch
               Select  @w_Error      = @@Error,
                       @w_linea      = Error_line(),
                       @w_desc_error = Substring (Error_Message(), 1, 200)

            End Catch

            If IsNull(@w_error, 0) <> 0
               Begin
                  Rollback Transaction

                  Select @PnEstatus = @w_error,
                         @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

                  Insert dbo.logCierreInicioEjercicioTbl
                 (Ejercicio, mes, descripcion, idError, mensajeError, usuario, ipAct)
                  Select @PnAnio, @PnMes, 'Alta a la tabla control', @w_error, @PnEstatus, @PsMensaje, @w_ipAct;
                  Set @w_idlogFin = @@Identity

                  Set Xact_Abort Off
                  Goto Salida
               End
         End
      Else
         Begin
            Begin Try

               Update dbo.control
               Set    idEstatus    = 1,
                      FechaProceso = @w_fechaCaptura,
                      usuario      = @w_usuario
               Where  ejercicio = @w_anioProximo
               And    mes       = @w_mesProximo
            End Try

            Begin Catch
               Select  @w_Error      = @@Error,
                       @w_linea      = Error_line(),
                       @w_desc_error = Substring (Error_Message(), 1, 200)

            End Catch

            If IsNull(@w_error, 0) <> 0
               Begin
                  Rollback Transaction

                  Select @PnEstatus = @w_error,
                         @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

                  Insert dbo.logCierreInicioEjercicioTbl
                 (Ejercicio, mes, descripcion, idError, mensajeError, usuario, ipAct)
                  Select @PnAnio, @PnMes, 'Actualizando la tabla control', @PnEstatus, @PsMensaje, @w_usuario, @w_ipAct;
                  Set @w_idlogFin = @@Identity
         
                  Set Xact_Abort Off
                  Goto Salida
               End
         End

--
-- Depuración de los movimientos contables del Período en el Histórico. Para actualizar el nuevo ejercicio.
--

      If Exists ( Select Top 1 1
                  From   dbo.MovimientosHist With (Nolock)
                  Where  ejercicio = @PnAnio)
         Begin
            Begin Try
               Delete dbo.MovimientosHist
               Where  ejercicio = @PnAnio;

            End Try

            Begin Catch
               Select  @w_Error      = @@Error,
                       @w_linea      = Error_line(),
                       @w_desc_error = Substring (Error_Message(), 1, 200)

            End Catch

            If IsNull(@w_error, 0) <> 0
               Begin
                  Rollback Transaction

                  Select @PnEstatus = @w_error,
                         @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

                  Insert dbo.logCierreInicioEjercicioTbl
                 (Ejercicio, mes, descripcion, idError, mensajeError, usuario, ipAct)
                  Select @PnAnio, @PnMes, 'Inicializando la Tabla MovimientosHist', @PnEstatus, @PsMensaje, @w_usuario, @w_ipAct;
                  Set @w_idlogFin = @@Identity
         
                  Set Xact_Abort Off
                  Goto Salida
               End
         End

--
-- Depuración del Cabecero detalle de los movimientos contables del Período en el Histórico. Para actualizar el nuevo ejercicio.
--

      If Exists ( Select Top 1 1
                  From   dbo.PolizaHist With (Nolock)
                  Where  ejercicio = @PnAnio)
         Begin
            Begin Try
               Delete dbo.PolizaHist
               Where  ejercicio = @PnAnio;

            End Try

            Begin Catch
               Select  @w_Error      = @@Error,
                       @w_linea      = Error_line(),
                       @w_desc_error = Substring (Error_Message(), 1, 200)

            End Catch

            If IsNull(@w_error, 0) <> 0
               Begin
                  Rollback Transaction

                  Select @PnEstatus = @w_error,
                         @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

                  Insert dbo.logCierreInicioEjercicioTbl
                 (Ejercicio, mes, descripcion, idError, mensajeError, usuario, ipAct)
                  Select @PnAnio, @PnMes, 'Inicializando la Tabla PolizaHist', @PnEstatus, @PsMensaje, @w_usuario, @w_ipAct;
                  Set @w_idlogFin = @@Identity
         
                  Set Xact_Abort Off
                  Goto Salida
               End
         End

--
-- Depuración del Catálogo en el Histórico. Para actualizar el nuevo ejercicio.
--

      If Exists ( Select Top 1 1
                  From   dbo.CatalogoAuxiliarHist With (Nolock)
                  Where  ejercicio = @PnAnio)
         Begin
            Begin Try
               Delete dbo.CatalogoAuxiliarHist
               Where  ejercicio = @PnAnio;

            End Try

            Begin Catch
               Select  @w_Error      = @@Error,
                       @w_linea      = Error_line(),
                       @w_desc_error = Substring (Error_Message(), 1, 200)

            End Catch

            If IsNull(@w_error, 0) <> 0
               Begin
                  Rollback Transaction

                  Select @PnEstatus = @w_error,
                         @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

                  Insert dbo.logCierreInicioEjercicioTbl
                 (Ejercicio, mes, descripcion, idError, mensajeError, usuario, ipAct)
                  Select @PnAnio, @PnMes, 'Inicializando la Tabla CatalogoAuxiliarHist', @PnEstatus, @PsMensaje, @w_usuario, @w_ipAct;
                  Set @w_idlogFin = @@Identity
         
                  Set Xact_Abort Off
                  Goto Salida
               End
         End
--
-- Alta de Cabecero de los movimientos contables del Período en el Histórico
--

      Begin Try
         Insert Into dbo.polizaHist
         (Referencia,      Fecha_mov,     Fecha_Cap, Concepto,   Cargos,
          Abonos,          TCons,         Usuario,   TipoPoliza, Documento,
          Usuario_cancela, Fecha_Cancela, Status,    Mes_Mov,    TipoPolizaConta,
          FuenteDatos,     ejercicio,     mes)
         Select Referencia,      Fecha_mov,     Fecha_Cap, Concepto,   Cargos,
                Abonos,          TCons,         Usuario,   TipoPoliza, Documento,
                Usuario_cancela, Fecha_Cancela, Status,    Mes_Mov,    TipoPolizaConta,
                FuenteDatos,     ejercicio,     mes
         From   dbo.poliza With (Nolock)
         Where  Ejercicio = @PnAnio;

      End Try

      Begin Catch
         Select  @w_Error      = @@Error,
                 @w_linea      = Error_line(),
                 @w_desc_error = Substring (Error_Message(), 1, 200)

      End Catch

      If IsNull(@w_error, 0) <> 0
         Begin
            Rollback Transaction

            Select @PnEstatus = @w_error,
                   @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

            Insert dbo.logCierreInicioEjercicioTbl
           (Ejercicio, mes, descripcion, idError, mensajeError, usuario, ipAct)
            Select @PnAnio, @PnMes, 'Alta a la Tabla polizaHist', @PnEstatus, @PsMensaje, @w_usuario, @w_ipAct;
            Set @w_idlogFin = @@Identity
         
            Set Xact_Abort Off
            Goto Salida
         End

--
-- Alta del detalle de los movimientos contables del Período en el Histórico
--

      Begin Try
         Insert Into dbo.movimientosHist
         (Referencia,  Cons,            Moneda,           Fecha_mov,     Llave,
          Concepto,    Importe,         Documento,        Clave,         FecCap,
          Sector_id,   Sucursal_id,     Region_id,        Importe_Cargo, Importe_Abono,
          Descripcion, TipoPolizaConta, ReferenciaFiscal, Fecha_Doc,     Ejercicio,
          mes)
         Select Referencia,  Cons,            Moneda,           Fecha_mov,     Llave,
                Concepto,    Importe,         Documento,        Clave,         FecCap,
                Sector_id,   Sucursal_id,     Region_id,        Importe_Cargo, Importe_Abono,
                Descripcion, TipoPolizaConta, ReferenciaFiscal, Fecha_Doc,     Ejercicio,
                mes
         From   dbo.movimientos With (Nolock)
         Where  Ejercicio = @PnAnio;

      End Try

      Begin Catch
         Select  @w_Error      = @@Error,
                 @w_linea      = Error_line(),
                 @w_desc_error = Substring (Error_Message(), 1, 200)

      End Catch

      If IsNull(@w_error, 0) <> 0
         Begin
            Rollback Transaction

            Select @PnEstatus = @w_error,
                   @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

            Insert dbo.logCierreInicioEjercicioTbl
           (Ejercicio, mes, descripcion, idError, mensajeError, usuario, ipAct)
            Select @PnAnio, @PnMes, 'Alta a la Tabla movimientosHist', @PnEstatus, @PsMensaje, @w_usuario, @w_ipAct;
            Set @w_idlogFin = @@Identity
                     
            Set Xact_Abort Off
            Goto Salida
         End

--
-- Alta del Catálogo Auxiliar del Período en el Histórico
--

      Begin Try
         Insert Into dbo.CatalogoAuxiliarHist
         (Llave,       Moneda,     Niv,         Sector_id,
          Sucursal_id, Region_id,  Descrip,     SAnt,
          Car,         Abo,        SAct,        FecCap,
          CarProceso,  AboProceso, SAntProceso, CarExt,
          AboExt,      SProm,      SPromAnt,    SProm2,
          SProm2Ant,   ejercicio,  mes)
         Select Llave,       Moneda,     Niv,         Sector_id,
                Sucursal_id, Region_id,  Descrip,     SAnt,
                Car,         Abo,        SAct,        FecCap,
                CarProceso,  AboProceso, SAntProceso, CarExt,
                AboExt,      SProm,      SPromAnt,    SProm2,
                SProm2Ant,   ejercicio,  mes
         From   dbo.CatalogoAuxiliar With (Nolock)
         Where  Ejercicio = @PnAnio

      End Try

      Begin Catch
         Select  @w_Error      = @@Error,
                 @w_linea      = Error_line(),
                 @w_desc_error = Substring (Error_Message(), 1, 200)

      End Catch

      If IsNull(@w_error, 0) <> 0
         Begin
            Rollback Transaction

            Select @PnEstatus = @w_error,
                   @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

            Insert dbo.logCierreInicioEjercicioTbl
           (Ejercicio, mes, descripcion, idError, mensajeError, usuario, ipAct)
            Select @PnAnio, @PnMes, 'Alta a la Tabla CatalogoAuxiliarHist', @PnEstatus, @PsMensaje, @w_usuario, @w_ipAct;
            Set @w_idlogFin = @@Identity
         
            Set Xact_Abort Off
            Goto Salida
         End


--
-- Depuración del detalle de los movimientos contables del Período Cerrado.
--

      Begin Try
         Delete dbo.movimientos
         Where  Ejercicio = @PnAnio;

      End Try

      Begin Catch
         Select  @w_Error      = @@Error,
                 @w_linea      = Error_line(),
                 @w_desc_error = Substring (Error_Message(), 1, 200)

      End Catch

      If IsNull(@w_error, 0) <> 0
         Begin
            Rollback Transaction

            Select @PnEstatus = @w_error,
                   @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

            Insert dbo.logCierreInicioEjercicioTbl
           (Ejercicio, mes, descripcion, idError, mensajeError, usuario, ipAct)
            Select @PnAnio, @PnMes, 'Depurando la Tabla movimientos', @PnEstatus, @PsMensaje, @w_usuario, @w_ipAct;
            Set @w_idlogFin = @@Identity
         
            Set Xact_Abort Off
            Goto Salida
         End

--
-- Depuración del cabecero de los movimientos contables del Período Cerrado.
--

      Begin Try
         Delete dbo.poliza
         Where  Ejercicio = @PnAnio;

      End Try

      Begin Catch
         Select  @w_Error      = @@Error,
                 @w_linea      = Error_line(),
                 @w_desc_error = Substring (Error_Message(), 1, 200)

      End Catch

      If IsNull(@w_error, 0) <> 0
         Begin
            Rollback Transaction

            Select @PnEstatus = @w_error,
                   @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

            Insert dbo.logCierreInicioEjercicioTbl
           (Ejercicio, mes, descripcion, idError, mensajeError, usuario, ipAct)
            Select @PnAnio, @PnMes, 'Depurando la Tabla poliza', @PnEstatus, @PsMensaje, @w_usuario, @w_ipAct;
            Set @w_idlogFin = @@Identity
         
            Set Xact_Abort Off
            Goto Salida
         End

--
-- Depuración del catálogo auxiliar del Período Cerrado.
--

      Begin Try
         Delete dbo.CatalogoAuxiliar
         Where  Ejercicio = @PnAnio;

      End Try

      Begin Catch
         Select  @w_Error      = @@Error,
                 @w_linea      = Error_line(),
                 @w_desc_error = Substring (Error_Message(), 1, 200)

      End Catch

      If IsNull(@w_error, 0) <> 0
         Begin
            Rollback Transaction

            Select @PnEstatus = @w_error,
                   @PsMensaje = Concat('Error.: ', @w_Error, ' ', @w_desc_error, ' en Línea ', @w_linea);

            Insert dbo.logCierreInicioEjercicioTbl
           (Ejercicio, mes, descripcion, idError, mensajeError, usuario, ipAct)
            Select @PnAnio, @PnMes, 'Depurando la Tabla CatalogoAuxiliar', @PnEstatus, @PsMensaje, @w_usuario, @w_ipAct;
            Set @w_idlogFin = @@Identity
         
            Set Xact_Abort Off
            Goto Salida
         End

--
-- Fin del proceso.
--

   Commit Transaction

   Select @PsMensaje = 'Traspaso realizado con éxito!',
          @PnEstatus = 0

Salida:

   Insert dbo.logCierreInicioEjercicioTbl
  (Ejercicio, mes, descripcion, idError, mensajeError, usuario, ipAct)
   Select @PnAnio, @PnMes, 'Fin de Proceso', @PnEstatus, @PsMensaje, @w_usuario, @w_ipAct;
   Set @w_idlogFin = @@Identity

   Select @PnEstatus = 0,
          @PsMensaje = Concat(Format(@w_idlogInic, Replicate('0', 10)), '-', Format(@w_idlogFin, Replicate('0', 10)))

   Set Xact_Abort Off
   Return

End
1> 2> 3> 4> 5> 6> 7> 8> 9> 10> 11> 12> 13> 14> 15> 16> 17> 18> 19> 20> 21> 22> 23> 24> 25> 26> 27> 28> 29> 30> 31> 32> 33> 34> 35> 36> 
--
-- Comentarios.
--

Declare
   @w_valor          Varchar(1500) = 'Mueve los saldos acumulados del ejercicio en cierre al Histórico.',
   @w_procedimiento  Varchar( 100) = 'Spp_actualizaInicioEjercicio'


If Not Exists (Select Top 1 1
               From   sys.extended_properties a
               Join   sysobjects  b
               On     b.xtype   = 'P'
               And    b.name    = @w_procedimiento
               And    b.id      = a.major_id)

   Begin
      Execute  sp_addextendedproperty @name       = N'MS_Description',
                                      @value      = @w_valor,
                                      @level0type = 'Schema',
                                      @level0name = N'Dbo',
                                      @level1type = 'Procedure',
                                      @level1name = @w_procedimiento;

   End
Else
   Begin
      Execute sp_updateextendedproperty @name       = 'MS_Description',
                                        @value      = @w_valor,
                                        @level0type = 'Schema',
                                        @level0name = N'Dbo',
                                        @level1type = 'Procedure',
                                        @level1name = @w_procedimiento
   End
1> 1> 2> 3> 4> 5> 6> 7> 8> 9> 10> 11> 12> 13> 14> 15> 16> 17> 18> 19> 20> 21> 22> 23> 24> 25> 26> 27> 28> 29> 30> 31> 32> 33> 34> 35> 36> 37> 38> 39> 40> 41> 42> 43> 44> 45> 46> 47> 48> 49> 50> 51> 52> 53> 54> 55> 56> 57> 58> 59> 60> 61> 62> 63> 64> 65> 66> 67> 68> 69> 70> 71> 72> 73> 74> 75> 76> 77> 78> 79> 80> 81> 82> 83> 84> 85> 86> 87> 88> 89> 90> 91> 92> 93> 94> 95> 96> 97> 98> 99> 100> 101> 102> 103> 104> 105> 106> 107> 108> 109> 110> 111> 112> 113> 114> 115> 116> 117> 118> 119> 120> 121> 122> 123> 124> 125> 126> 127> 128> 129> 130> 131> 132> 133> 134> 135> 136> 137> 138> 139> 140> 141> 142> 143> 144> 145> 146> 147> 148> 149> 150> 151> 152> 153> 154> 155> 156> 157> 158> 159> 160> 161> 162> 163> 164> 165> 166> 167> 168> 169> 170> 171> 172> 173> 174> 175> 176> 177> 178> 179> 180> 181> 182> 183> 184> 185> 186> 187> 188> 189> 190> 191> 192> 193> 194> 195> 196> 197> 198> 199> 200> 201> 202> 203> 204> 205> 206> 207> 208> 209> The module 'Spp_InicioEjercicio' depends on the missing object
'Spp_notificaResultadoCierre'. The module will still be created; however, it
cannot run successfully until the object exists.
/*

-- Declare
   -- @PnEstatus             Integer             = 0,
   -- @PsMensaje             Varchar( 250)       = ' ' ;
-- Begin

   -- Execute dbo.Spp_InicioEjercicio @PnEstatus   = @PnEstatus Output,
                                   -- @PsMensaje   = @PsMensaje Output;

   -- Select @PnEstatus, @PsMensaje
   -- Return
-- End
-- Go

--

-- Objeto:        Spp_InicioEjercicio.
-- Objetivo:      Valida parámetros para la ejecución del procedimiento que mueve los saldos acumulados del ejercicio en cierre al Histórico
-- Fecha:         19/09/2024
-- Programador:   Pedro Zambrano
-- Versión:       1


*/

Create Or Alter Procedure dbo.Spp_InicioEjercicio
  (@PsUsuario             Varchar(  10)       = Null,
   @PnEstatus             Integer             = 0   Output,
   @PsMensaje             Varchar( 250)       = ' ' Output)
As

Declare
   @w_anio                Smallint,
   @w_mes                 Tinyint,
   @w_fechaIniProc        Date,
   @w_fechaFinProc        Date,
   @w_fechaProc           Date,
   @w_parametro           Varchar(Max),
   @w_desc_error          Varchar(250),
   @w_operacion           Integer,
   @w_idlogIni            Integer,
   @w_idlogFin            Integer,
   @w_error               Integer,
   @w_linea               Integer,
--
   @w_idusuario           Varchar(  Max),
   @w_usuario             Varchar(   10),
   @w_consulta            NVarchar(1500),
   @w_param               NVarchar( 750);

Begin
   Set Nocount       On
   Set Xact_Abort    On
   Set Ansi_Nulls    Off

   Select @PnEstatus         = 0,
          @w_Error           = 0,      
          @PsMensaje         = Null,
          @w_operacion       = 9999,
          @w_fechaProc       = Getdate();

--
-- Búsqueda del rango de la fecha de proceso.
--

   Select @w_parametro = parametroChar
   From   dbo.conParametrosGralesTbl With (Nolock)
   Where  idParametroGral = 10;
   If @@Rowcount = 0
      Begin
         Select @PnEstatus = 139,
                @PsMensaje = dbo.Fn_Busca_MensajeError(@w_operacion, @PnEstatus);

         Set Xact_Abort    Off
         Return
      End

   Begin Try
      Select @w_fechaIniProc = Convert(Date, Concat(Substring(@w_parametro, 1, 2), '/',
                                                    Substring(@w_parametro, 3, 2), '/',
                                                    DatePart(yyyy, @w_fechaProc)), 103),
             @w_fechaFinProc = Convert(Date, Concat(Substring(@w_parametro, 6, 2), '/',
                                                    Substring(@w_parametro, 8, 2), '/',
                                                    DatePart(yyyy, @w_fechaProc)), 103);
   End Try

   Begin Catch
      Select  @w_Error      = @@Error,
              @w_linea      = Error_line(),
              @w_desc_error = Substring (Error_Message(), 1, 200)

   End   Catch

   If @w_error != 0
      Begin
         Select @PnEstatus = @w_error,
                @PsMensaje = @w_desc_error;

         Set Xact_Abort    Off
         Return
      End

   If @w_fechaProc  Not Between @w_fechaIniProc And @w_fechaFinProc
      Begin
         Select @w_fechaProc hoy, @w_fechaIniProc Ini, @w_fechaFinProc Fin

         Set Xact_Abort    Off
         Return
      End

   Select @w_anio = ejercicio
   From   dbo.ejercicios  With (Nolock)
   Where  idEstatus = 3;
   If @@Rowcount = 0
      Begin
         Select @PnEstatus = 140,
                @PsMensaje = dbo.Fn_Busca_MensajeError(@w_operacion, @PnEstatus);

         Set Xact_Abort    Off
         Return
      End

   Select @w_mes = mes
   From   dbo.control a With (Nolock)
   Where  ejercicio = @w_anio
   And    mes       = (Select Max(mes)
                       From   dbo.control With (Nolock)
                       Where  ejercicio = a.ejercicio);
   If @@Rowcount = 0
      Begin
         Select @PnEstatus = 141,
                @PsMensaje = dbo.Fn_Busca_MensajeError(@w_operacion, @PnEstatus);;

         Set Xact_Abort    Off
         Return
      End;

--
-- Búsqueda del usuario de Proceso Batch.
--

   Select @w_idusuario = parametroChar
   From   dbo.conParametrosGralesTbl
   Where  idParametroGral = 6;

   Select @w_consulta   = Concat('Select @o_usuario = dbo.Fn_Desencripta_cadena (', @w_idusuario, ')'),
          @w_param      = '@o_usuario    Nvarchar(20) Output';

   Begin Try
      Execute Sp_executeSql @w_consulta, @w_param, @o_usuario = @w_usuario Output
   End Try

   Begin Catch
      Select  @w_Error      = @@Error,
              @w_linea      = Error_line(),
              @w_desc_error = Substring (Error_Message(), 1, 200)

   End   Catch

   If Isnull(@w_error, 0) != 0
      Begin
         Select @w_error, @w_desc_error;

         Set Xact_Abort    Off
         Return
      End

--
-- Inicio Proceso
--

   Execute dbo.Spp_actualizaInicioEjercicio @PnAnio      = @w_anio,
                                            @PnMes       = @w_mes,
                                            @PnEstatus   = @PnEstatus Output,
                                            @PsMensaje   = @PsMensaje Output;


   Select @w_idlogIni = Case When IsNumeric(dbo.Fn_splitStringColumna(@PsMensaje, '-', 1)) = 0
                             Then 0
                             Else dbo.Fn_splitStringColumna(@PsMensaje, '-', 1)
                        End,
          @w_idlogFin = Case When IsNumeric(dbo.Fn_splitStringColumna(@PsMensaje, '-', 2)) = 0
                             Then 0
                             Else dbo.Fn_splitStringColumna(@PsMensaje, '-', 2)
                        End;

   If  @w_idlogIni != 0 And
       @w_idlogFin != 0
       Begin
          Set @w_parametro = (Select CodigoMotivoCorreo = 'CierrePeriodo',
                                     codigoGrupo        = 'GrupoCierre',
                                     Ejercicio          = @w_anio,
                                     mes                = @w_mes,
                                     idlogIni           = @w_idlogIni,
                                     idlogFin           = @w_idlogFin
                              For json Path)
   
          Execute Spp_notificaResultadoCierre @PsIdParametro  = @w_parametro,
                                              @PsIdUsuarioAct = @w_usuario,
                                              @PnEstatus      = @PnEstatus Output,
                                              @PsMensaje      = @PsMensaje Output;
       End

   Set Xact_Abort    Off
   Return

End
1> 2> 3> 4> 5> 6> 7> 8> 9> 10> 11> 12> 13> 14> 15> 16> 17> 18> 19> 20> 21> 22> 23> 24> 25> 26> 27> 28> 29> 30> 31> 32> 33> 34> 35> 36> 
--
-- Comentarios.
--

Declare
   @w_valor          Varchar(1500) = 'Valida parámetros para la ejecución del procedimiento que mueve los saldos acumulados del ejercicio en cierre al Histórico.',
   @w_procedimiento  Varchar( 100) = 'Spp_InicioEjercicio'


If Not Exists (Select Top 1 1
               From   sys.extended_properties a
               Join   sysobjects  b
               On     b.xtype   = 'P'
               And    b.name    = @w_procedimiento
               And    b.id      = a.major_id)

   Begin
      Execute  sp_addextendedproperty @name       = N'MS_Description',
                                      @value      = @w_valor,
                                      @level0type = 'Schema',
                                      @level0name = N'Dbo',
                                      @level1type = 'Procedure',
                                      @level1name = @w_procedimiento;

   End
Else
   Begin
      Execute sp_updateextendedproperty @name       = 'MS_Description',
                                        @value      = @w_valor,
                                        @level0type = 'Schema',
                                        @level0name = N'Dbo',
                                        @level1type = 'Procedure',
                                        @level1name = @w_procedimiento
   End
1> 1> 2> USE msdb
1> 2> 3> 4> 5> 6> 7> 8> 9> 10> 11> 12> 13> 14> 15> 16> 17> 18> 19> 20> 21> 22> 23> 24> 25> 26> 27> 28> 29> 30> 31> 32> 33> 34> 35> 36> 37> 38> 39> 40> 41> 42> 43> 44> 45> 46> 47> 48> 49> 50> 51> 52> 53> 54> 55> 56> 57> 58> 59> 60> 61> 62> 63> 64> 65> 66> 67> 68> 69> 70> 71> 72> 73> 74> 75> 76> 77> 78> 79> 80> 81> 82> 83> 84> 85> 86> 87> 88> 89> 90> 91> 92> 93> 94> 95> 96> 97> 98> 99> 100> 101> 102> 103> 104> 105> 106> 107> 108> 109> 110> 111> 112> 113> 114> 115> 116> 117> 118> 119> 120> 121> 122> 123> 124> 125> 126> 127> 128> 129> 130> 131> 132> 133> 134> 135> 136> 137> 138> 139> 140> 141> 142> 
--
-- Programador: Pedro Zambrano
-- Fecha:       17-sep-2024.
-- Observación: Script de creación del Job inicio de ejercicio.
--

/****** Object:  Job [FinalizaEjercicio]    Script Date: 18/09/2024 01:47:21 p. m. ******/
Declare
   @ReturnCode Integer,
   @jobId      Binary(16);

Begin
   Set @ReturnCode = 0

/****** Object:  JobCategory [[Uncategorized (Local)]]    Script Date: 18/09/2024 01:47:21 p. m. ******/

   Begin Transaction
      If Not Exists (Select name
                     From   msdb.dbo.syscategories
                     Where  name          = N'[Uncategorized (Local)]'
                     And    category_class= 1)
         Begin
            Execute @ReturnCode = msdb.dbo.sp_add_category @class = N'JOB',
                                                           @type  = N'LOCAL',
                                                           @name  = N'[Uncategorized (Local)]'
            If @@Error     <> 0 Or
               @ReturnCode <> 0
               Begin
                  Rollback Transaction
                  Goto Salida
               End

         End

      If Exists ( Select Top 1 1
                  From   msdb.dbo.sysjobs
			      where  Name = 'FinalizaEjercicio')
               Begin
                  Rollback Transaction
                  Goto Salida
               End           

      Execute @ReturnCode =  msdb.dbo.sp_add_job @job_name              = N'FinalizaEjercicio',
                                                 @enabled               = 1,
                                                 @notify_level_eventlog = 0,
                                                 @notify_level_email    = 0,
                                                 @notify_level_netsend  = 0,
                                                 @notify_level_page     = 0,
                                                 @delete_level          = 0,
                                                 @description           = N'Proceso de Pase de Acumulados al Histórico.',
                                                 @category_name         = N'[Uncategorized (Local)]',
                                                 @owner_login_name      = N'sa',
                                                 @job_id                = @jobId Output;

      If @@Error     <> 0 Or
         @ReturnCode <> 0
         Begin
            Rollback Transaction
            Goto Salida
         End

/****** Object:  Step [FinalizaEjercicio]    Script Date: 18/09/2024 01:47:21 p. m. ******/

      Execute @ReturnCode = msdb.dbo.sp_add_jobstep @job_id               = @jobId,
                                                    @step_name            = N'FinalizaEjercicio',
                                                    @step_id              = 1,
                                                    @cmdexec_success_code = 0,
                                                    @on_success_action    = 1,
                                                    @on_success_step_id   = 0,
                                                    @on_fail_action       = 2,
                                                    @on_fail_step_id      = 0,
                                                    @retry_attempts       = 0,
                                                    @retry_interval       = 0,
                                                    @os_run_priority      = 0,
                                                    @subsystem            = N'TSQL',
                                                    @command              = N'dbo.Spp_InicioEjercicio',
                                                    @database_name        = N'DB_Siccorp_DES',
                                                    @flags                = 0

      If @@Error     <> 0 Or
         @ReturnCode <> 0
         Begin
            Rollback Transaction
            Goto Salida
         End

      Execute @ReturnCode = msdb.dbo.sp_update_job @job_id        = @jobId, 
                                                   @start_step_id = 1;

      If @@Error     <> 0 Or
         @ReturnCode <> 0
         Begin
            Rollback Transaction
            Goto Salida
         End

      Execute @ReturnCode = msdb.dbo.sp_add_jobschedule @job_id                  = @jobId,
                                                        @name                    = N'FinalizaEjercicio',
                                                        @enabled                 = 1,
                                                        @freq_type               = 4,
                                                        @freq_interval           = 1,
                                                        @freq_subday_type        = 1,
                                                        @freq_subday_interval    = 0,
                                                        @freq_relative_interval  = 0,
                                                        @freq_recurrence_factor  = 0,
                                                        @active_start_date       = 20250101,
                                                        @active_end_date         = 99991231,
                                                        @active_start_time       = 230000,
                                                        @active_end_time         = 235959,
                                                        @schedule_uid            = N'5eaa18cd-27e0-4f9f-8fd2-cd61abce75e6';

      If @@Error     <> 0 Or
         @ReturnCode <> 0
         Begin
            Rollback Transaction
            Goto Salida
         End

      Execute @ReturnCode = msdb.dbo.sp_add_jobserver @job_id      = @jobId,
                                                      @server_name = N'(local)';

      If @@Error     <> 0 Or
         @ReturnCode <> 0
         Begin
            Rollback Transaction
            Goto Salida
         End

   Commit Transaction

Salida:

   If @@Trancount > 0
      Begin
         Rollback Transaction
      End

   Return;

End
1> 